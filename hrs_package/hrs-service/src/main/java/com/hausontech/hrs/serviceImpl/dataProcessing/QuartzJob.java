package com.hausontech.hrs.serviceImpl.dataProcessing;  
  
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.Job;  
import org.quartz.JobDataMap;  
import org.quartz.JobExecutionContext;  
import org.quartz.JobExecutionException;
import org.quartz.PersistJobDataAfterExecution;
import com.hausontech.hrs.api.constants.JobStatus;
import com.hausontech.hrs.api.engine.ICalculationDao;
import com.hausontech.hrs.bean.dataProcess.AllocRequestInstanceHistoryRecord;
import com.hausontech.hrs.daoImpl.IBaseDao2;
import com.hausontech.hrs.daoImpl.dataPorcessing.mapper.HaeAllocInstanceMapper;
import com.hausontech.hrs.exceptions.DuplicateJobRunningException;  
  
/** 
 * 任务执行类 
 * KETTLE初始化、运行等在service层所以job执行任务类只能在service层
 */
@PersistJobDataAfterExecution  
@DisallowConcurrentExecution
public class QuartzJob implements Job {  
    @Override  
    public void execute(JobExecutionContext content) throws JobExecutionException {
    	JobDataMap dataMap = content.getJobDetail().getJobDataMap();  
        AllocRequestInstanceHistoryRecord requestHistoryBean = (AllocRequestInstanceHistoryRecord) dataMap.get("requestHistoryBean");
        String jobName=(String) dataMap.get("jobName");
        HaeAllocInstanceMapper allocInstanceMapper =  (HaeAllocInstanceMapper) dataMap.get("allocInstanceMapper");
        IBaseDao2 baseDao2=(IBaseDao2)dataMap.get("baseDao2");
        long primaryKey = 0;
        primaryKey=baseDao2.getAutoGeneratedPrimaryKey("HAE_ALLOC_INSTANCE_HISTORY_S");
        requestHistoryBean.setHistoryId(primaryKey);
		try {
			allocInstanceMapper.saveAllocRequestInstanceHistoryRecord(requestHistoryBean);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		boolean isError = false;
		String errorMsg = "";
		String returnvalue ="";
		long startTime = System.currentTimeMillis();
		try {
			AllocRequestInstanceHistoryRecord queryBean = new AllocRequestInstanceHistoryRecord();
			queryBean.setStatus(JobStatus.PROCESSING);
			int processingCount = allocInstanceMapper.getAllocRequestInstanceHistoryRecordCount(null,queryBean.getStatus());
			queryBean.setStatus(JobStatus.ROLLBACKING);
			int rollbackingCount =allocInstanceMapper.getAllocRequestInstanceHistoryRecordCount(null,queryBean.getStatus());
			int runningCount = processingCount + rollbackingCount;
			if (0 < runningCount) {
				throw new DuplicateJobRunningException();
			} else {
				// set job instance status
				requestHistoryBean.setStatus(JobStatus.PROCESSING);
				requestHistoryBean.setStartTime(new Date());
				requestHistoryBean.setMessage("");
				allocInstanceMapper.updateAllocRequestInstanceHistoryRecord(requestHistoryBean);
				// Execute content
				// CalculationDao calDao = new CalculationDao();
				// this.calculationDao.generateFinIndexAlloc(requestBean);
				// get item constant list
				Map map = new HashMap();
		        map.put("returnvalue", "");
		        map.put("historyId", requestHistoryBean.getHistoryId());
		        allocInstanceMapper.getItemContentsAlloc(map);
		        returnvalue=(String)map.get("returnvalue");
				/*
				 * if (0 < contentList.size()) { //calculation in the group
				 * calculationResult = this.calculateInGroup(contentList); }
				 */
				if (!"S101".equals(returnvalue)) {
					isError = true;
				}
			}
		} catch (DuplicateJobRunningException de) {
			isError = true;
			errorMsg = "已经有任务处于运行状态，不允许多个任务同时执行";
			requestHistoryBean.setStatus("error");
			try {
				allocInstanceMapper.updateAllocRequestInstanceHistoryRecord(requestHistoryBean);
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			try {
				throw de;
			} catch (DuplicateJobRunningException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (Exception e) {
			System.out.println(e);
			isError = true;
			errorMsg = e.toString();
			requestHistoryBean.setStatus("error");
			try {
				allocInstanceMapper.updateAllocRequestInstanceHistoryRecord(requestHistoryBean);
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.out.println("Error happens when calculation: " + e);
		}
		// if there's result , then insert result into db
		/*
		 * if (calculationResult != null && !calculationResult.isEmpty()) { try
		 * { calculationDao.insertCalculationItems(calculationResult,
		 * requestBean.getRequestUser(), requestBean.getInstanceId()); } catch
		 * (SQLException e) { isError = true; errorMsg = e.toString(); } }
		 */
		if (isError) {
			requestHistoryBean.setStatus(JobStatus.FAILED);
			requestHistoryBean.setMessage(errorMsg);
		} else {
			requestHistoryBean.setStatus(JobStatus.SUCCESS);
		}
		requestHistoryBean.setStatus(returnvalue);
		requestHistoryBean.setEndTime(new Date());
		requestHistoryBean.setElapsedTime(System.currentTimeMillis() - startTime);
		try {
			allocInstanceMapper.updateAllocRequestInstanceHistoryRecord(requestHistoryBean);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
        //System.out.println("并行-------执行任务名是="+jobName);
    }  
}  