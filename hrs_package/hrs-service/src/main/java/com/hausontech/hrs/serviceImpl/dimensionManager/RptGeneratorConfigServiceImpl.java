package com.hausontech.hrs.serviceImpl.dimensionManager;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;

import com.hausontech.hrs.api.dimensionManager.dao.IDimensionDao;
import com.hausontech.hrs.api.dimensionManager.service.IRptGeneratorConfigService;
import com.hausontech.hrs.bean.dimensionManager.DimensionBean;
import com.hausontech.hrs.bean.dimensionManager.DimensionSonValueBean;
import com.hausontech.hrs.bean.dimensionManager.DimensionValueBean;
import com.hausontech.hrs.bean.reportSetting.ItemLookUpHeaderBean;
import com.hausontech.hrs.daoImpl.IBaseDao2;
import com.hausontech.hrs.daoImpl.dimensionManager.mapper.DimensionMapper;
@Service
public class RptGeneratorConfigServiceImpl implements IRptGeneratorConfigService {

	@Autowired
	private DimensionMapper dimensionDaoMybatis;
	

//	private IDimensionDao dimensionDao;
	//baseDao注入，查询序列
	@Autowired
	private IBaseDao2 baseDao2;
	
	
	public IBaseDao2 getBaseDao2() {
		return baseDao2;
	}

	public void setBaseDao2(IBaseDao2 baseDao2) {
		this.baseDao2 = baseDao2;
	}

	public DimensionMapper getDimensionDaoMybatis() {
		return dimensionDaoMybatis;
	}

	public void setDimensionDaoMybatis(DimensionMapper dimensionDaoMybatis) {
		this.dimensionDaoMybatis = dimensionDaoMybatis;
	}

//	public IDimensionDao getDimensionDao() {
//		return dimensionDao;
//	}
//
//	public void setDimensionDao(IDimensionDao dimensionDao) {
//		this.dimensionDao = dimensionDao;
//	}

	@Override
	public List<Map<String, Object>> getByCondition(DimensionBean condition) throws Exception {
		// TODO Auto-generated method stub
		if (condition == null) {
			throw new Exception("no query bean found");
		}
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
		Map<String, Object> map=null;
		List<DimensionBean> result1 = null;
		result1 = dimensionDaoMybatis.selectByCondition(condition);
		for (int i = 0; i < result1.size(); i++) {
			map=new HashMap<String, Object>();
			map.put("DIMENSION_ID",result1.get(i).getDimensionId());
			map.put("DIMENSION_CODE",result1.get(i).getDimensionCode());
			map.put("DIM_SEQ", result1.get(i).getDimSeq());
			map.put("DIM_SEGMENT",result1.get(i).getDimSegment());
			map.put("FIN_ACCOUNT_FLAG",result1.get(i).getFinAccountFlag());
			map.put("DIMENSION_NAME", result1.get(i).getDimensionName());
			result.add(map);
		}
		return result;
	}

	@Override
	public int getCountByCondition(DimensionBean condition) throws SQLException {
		// TODO Auto-generated method stub
		return dimensionDaoMybatis.countByCondition(condition);
	}
	
	@Override
	public long createNewDimension(DimensionBean newRecord) throws DuplicateKeyException, Exception {
	    if (newRecord == null) {
	    	throw new Exception("New dimension bean is null");
	    }
	    
	    long primaryKey = 0L;
	    try {
	    	//插入维度记录
	    	primaryKey = baseDao2.getAutoGeneratedPrimaryKey("HRS_CORE_DIMENSION_S");
	    	newRecord.setDimensionId(primaryKey);
	    	dimensionDaoMybatis.insert(newRecord);
	    } catch (SQLException se) {
	    	throw new Exception(se);
	    }
	    return primaryKey;
	}

	@Override
	public DimensionBean getDimensionByPrimaryKey(long key) throws Exception {
		if (key == 0) {
			throw new Exception("The dimension id is empty.");
		}
		try {
			return dimensionDaoMybatis.selectByPrimaryKey(key);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new Exception(e);
		}
	}
	
	@Override
	public DimensionBean getDimensionByDimSegment(String segmentCode) throws Exception {
		if (StringUtils.isBlank(segmentCode)) {
			throw new Exception("The segment code is empty.");
		}
		try {
			return dimensionDaoMybatis.getDimensionInfoBySegment(segmentCode);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new Exception(e);
		}
	}

	@Override
	public List<Map<String, Object>> getDimensionValueListByCondition(DimensionValueBean condition) throws Exception {
		if (condition == null) {
			throw new Exception("The Item Rule Header bean is null or Rule header id is empty.");
		}
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
		Map<String, Object> map=null;
		List<DimensionValueBean> result1 = null;
		result1 = dimensionDaoMybatis.getDimensionValueListByCondition(condition);
		for (int i = 0; i < result1.size(); i++) {
			map=new HashMap<String, Object>();
			map.put("DIM_VALUE_ID",result1.get(i).getDimensionValueId());
			map.put("DIMENSION_ID",result1.get(i).getDimensionId());
			map.put("DIM_VALUE", result1.get(i).getDimensionValue());
			map.put("DESCRIPTION",result1.get(i).getDescription());
			map.put("ACCOUNT_TYPE",result1.get(i).getAccountType());
			map.put("SUMMARY_FLAG", result1.get(i).getSummaryFlag());
			map.put("DIM_LEVEL",result1.get(i).getDimensionLevel());
			map.put("START_DATE",result1.get(i).getStartDate());
			map.put("END_DATE", result1.get(i).getEndDate());
			map.put("ATTRIBUTE1",result1.get(i).getAttribute1());
			map.put("ATTRIBUTE2",result1.get(i).getAttribute2());
			map.put("ATTRIBUTE3", result1.get(i).getAttribute3());
			map.put("ATTRIBUTE4",result1.get(i).getAttribute4());
			map.put("ATTRIBUTE5",result1.get(i).getAttribute5());
			map.put("ATTRIBUTE6", result1.get(i).getAttribute6());
			map.put("ATTRIBUTE7",result1.get(i).getAttribute7());
			map.put("ATTRIBUTE8",result1.get(i).getAttribute8());
			map.put("ATTRIBUTE9", result1.get(i).getAttribute9());
			map.put("ATTRIBUTE10", result1.get(i).getAttribute10());
			map.put("SOURCE",result1.get(i).getSource());
			map.put("CREATION_DATE", result1.get(i).getCreationDate());
			map.put("CREATED_BY", result1.get(i).getCreatedBy());
			map.put("LAST_UPDATE_DATE",result1.get(i).getLastUpdateDate());
			map.put("LAST_UPDATED_BY", result1.get(i).getLastUpdatedBy());
			result.add(map);
		}
		return result;
	}
	
	
	@Override
	public int updateDimensionHeader(DimensionBean record) throws Exception {
		if (record == null || record.getDimensionId() == 0) {
			throw new Exception("The Item Rule Header bean is null or Rule header id is empty.");
		}
		int result = 0;
		result = dimensionDaoMybatis.updateByPrimaryKey(record);
		return result;
	}

	@Override
	public int createNewDimensionValueRecord(DimensionValueBean queryBean) throws DuplicateKeyException, Exception {
		if (queryBean == null) {
			throw new Exception("The Dimension Value bean is null.");
		}
		//int result = 0;
		int primaryKey = 0;
		try {
			primaryKey = (int) baseDao2.getAutoGeneratedPrimaryKey("HRS_CORE_DIMENSION_VALUE_S");
			queryBean.setDimensionValueId(primaryKey);
			if ("-1".equals(queryBean.getAccountType())) {
				queryBean.setAccountType(null);
			}
			dimensionDaoMybatis.saveDimensionValueRecord(queryBean);
		} catch (SQLException se) {
			//System.out.println(se);
			throw new Exception(se);
		}
		return primaryKey;
	}
	

	@Override
	public int updateDimensionValueRecord(DimensionValueBean queryBean) throws DuplicateKeyException, Exception {
		if (queryBean == null || queryBean.getDimensionValueId() == 0) {
			throw new Exception("The Dimension value bean is null or dimension id is empty.");
		}
		int result = 0;
		try {
			if ("-1".equals(queryBean.getAccountType())) {
				queryBean.setAccountType(null);
			}
			//try to get dimension inforamtion 
			result = dimensionDaoMybatis.updateDimensionValueRecord(queryBean);
		} catch (SQLException se) {
			throw new Exception(se);
		}
		return result;
	}
	
	@Override
	public int deleteDimensionValueRecord(DimensionValueBean removedBean) throws Exception {
		if (removedBean == null || removedBean.getDimensionValueId() == 0) {
			throw new Exception("The Dimension value bean is null or dimension id is empty.");
		}
		int delCount = 0;
		try {
			//try to delete rule header
			delCount = dimensionDaoMybatis.deleteDimensionValueRecord(removedBean);		
		} catch (SQLException se) {
			throw new Exception(se);
		}
		return delCount;
	}


	@Override
	public List<Map<String, Object>> getDimensionSonValueListByCondition(DimensionSonValueBean dimValueSonBean)
			throws Exception {
		if (dimValueSonBean == null) {
			throw new Exception("The Item Rule Header bean is null or Rule header id is empty.");
		}
		
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
		Map<String, Object> map=null;
		List<DimensionSonValueBean> result1 = null;
		result1 = dimensionDaoMybatis.getDimensionSonValueListByCondition(dimValueSonBean);
		for (int i = 0; i < result1.size(); i++) {
			map=new HashMap<String, Object>();
			map.put("HIERARCHY_ID",result1.get(i).getHierarchyId());
			map.put("DIM_VALUE",result1.get(i).getDimValue());
			map.put("DIMENSION_ID", result1.get(i).getDimensionId());
			map.put("CHILD_DIM_VALUE_LOW",result1.get(i).getChildDimValueLow());
			map.put("CHILD_DIM_VALUE_HIGH",result1.get(i).getChildDimValueHigh());
			map.put("SOURCE",result1.get(i).getSource());
			map.put("CREATION_DATE", result1.get(i).getCreationDate());
			map.put("CREATED_BY", result1.get(i).getCreatedBy());
			map.put("LAST_UPDATE_DATE",result1.get(i).getLastUpdateDate());
			map.put("LAST_UPDATED_BY", result1.get(i).getLastUpdatedBy());
			result.add(map);
		}
			return  result;
	}

	@Override
	public int getCountByDimensionSonValueBean(DimensionSonValueBean dimValueSonBean) throws Exception {
		// TODO Auto-generated method stub
		return dimensionDaoMybatis.countByDimensionSonValueBean(dimValueSonBean);
	}

	@Override
	public int createNewDimensionSonValueRecord(DimensionSonValueBean reqBean) throws Exception {
		if (reqBean == null) {
			throw new Exception("The Dimension Value bean is null.");
		}
		int result = 0;
		long primaryKey = 0L;
	    try {
	    	//插入维度记录
	    	primaryKey = baseDao2.getAutoGeneratedPrimaryKey("HRS_CORE_DIM_VALUE_HIERARCHY_S");
	    	reqBean.setHierarchyId(primaryKey);
			
			result = dimensionDaoMybatis.saveDimensionSonValueRecord(reqBean);
		} catch (SQLException se) {
			throw new Exception(se);
		}
		return result;
	}

	@Override
	public int updateDimensionSonValueRecord(DimensionSonValueBean reqBean) throws Exception {
		if (reqBean == null || reqBean.getHierarchyId() == 0) {
			throw new Exception("The Dimension value bean is null or dimension id is empty.");
		}
		int result = 0;
		try {
			//try to get dimension inforamtion 
			result = dimensionDaoMybatis.updateDimensionSonValueRecord(reqBean);
		} catch (SQLException se) {
			//System.out.println(se.toString());
			throw new Exception(se);
		}
		return result;
	}

	@Override
	public DimensionValueBean getDimensionValueByPrimaryKey(long parseLong, long parseLong2) throws Exception {
		if(parseLong == 0||parseLong2==0){
			throw new Exception("The dimension id is empty.");
		}
		try {
			return dimensionDaoMybatis.selectDimensionValueBeanByPrimaryKey(parseLong,parseLong2);
		} catch (SQLException e) {
			
			throw new Exception(e);
		}
	}

	
	@Override
	public List<DimensionValueBean> getDimensionValueByCondition(DimensionValueBean queryBean) throws Exception {
		if(queryBean == null){
			throw new Exception("The dimension value query bean is empty.");
		}
		try {
			return dimensionDaoMybatis.getDimensionValueByCondition(queryBean);
		} catch (SQLException e) {
			throw new Exception(e);
		}
	}
	
	@Override
	public int getCountByCondition(DimensionValueBean condition) throws Exception {
		return dimensionDaoMybatis.countByConditionDimensionValue(condition);
	}


	@Override
	public List<Map<String, Object>> getLookUpValueListAsDimension(ItemLookUpHeaderBean lookUpHeaderBean) throws Exception {
		if (lookUpHeaderBean == null) {
			throw new Exception("The Item lookUp Header bean is null.");
		}
		List<Map<String, Object>> result = null;
		try {
			result = dimensionDaoMybatis.getLookUpValueListAsDimension(lookUpHeaderBean);
			
		} catch (SQLException se) {
			throw new Exception(se);
		}
		return result;
	}

	@Override
	public int countLookUpValueListByCondition(ItemLookUpHeaderBean lookUpHeaderBean) throws Exception {
		// TODO Auto-generated method stub
		return dimensionDaoMybatis.countLookUpValueListByCondition(lookUpHeaderBean);
	}


}
