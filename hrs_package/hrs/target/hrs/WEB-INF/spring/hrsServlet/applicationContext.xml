<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
	<!-- *********************配置数据源********************************* -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<property name="testOnBorrow"> 
            <value>true</value> 
        </property> 
        <property name="validationQuery"> 
            <value>SELECT 1 FROM DUAL</value> 
        </property> 
	</bean>
	
	
	<!-- ************************配置Session工厂******************************* -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 使用别名，保证在mybatis的子配置文件中，可以直接书写com.hausontech.hrs.bean包类的简单名字 -->
		<property name="typeAliasesPackage" value="com.hausontech.hrs.bean" />
		<property name="mapperLocations" value="classpath:com/hausontech/hrs/daoImpl/*.xml"/>
	</bean>
	
	<!-- ********************指明mybatis子配置文件的位置（没有mybatis主配置文件）************************** -->
	<!-- 
		指明mybatis子配置文件的位置
		在spring扫描到UserMapper.xml文件的时候，就会根据UserMapper.xml直接创建出UserMapper接口的实现类，且实例化
		实例化的对象被存入spring ioc容器中 
	-->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hausontech.hrs.daoImpl" />
	</bean>
	
	
	<!-- **************************配置事物管理器**************************** -->
	<!--
		事务管理的类是： DataSourceTransactionManager而不是：HibernateTransactionManager
		（注意和Strust2区别）
	 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--
			为事务管理器注入数据源dataSource而不是注入sf （注意和Strust2区别）
		 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- ************************启用注解*************************** -->
	<!-- 扫描包，启用注解 -->
	<context:component-scan base-package="com.hausontech.hrs">
	    <!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/> -->
	</context:component-scan>
	
	<!-- 开启事务注解 -->
	<tx:annotation-driven />
		 <bean id="rptSettingService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
         <property name="transactionManager" ref="transactionManager" />     
         <property name="target" ref="rptSettingServiceTarget" />  
         <property name="proxyInterfaces" value="com.hausontech.hrs.api.reportSetting.service.IRptSettingService" /> 
        <property name="transactionAttributes">  
            <props>  
                <prop key="create*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>  
        </property>  
    </bean>
 
    <bean id="rptGenConfigService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
         <property name="transactionManager" ref="transactionManager" />     
         <property name="target" ref="rptGenConfigServiceTarget" />  
         <property name="proxyInterfaces" value="com.hausontech.hrs.api.dimensionManager.service.IRptGeneratorConfigService" /> 
        <property name="transactionAttributes">  
            <props>  
                <prop key="create*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>  
        </property>  
    </bean>
    
    <bean id="dataProcessService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
         <property name="transactionManager" ref="transactionManager" />     
         <property name="target" ref="dataProcessServiceTarget" />  
         <property name="proxyInterfaces" value="com.hausontech.hrs.api.dataProcessing.service.IDataProcessService" /> 
        <property name="transactionAttributes">  
            <props>  
                <prop key="create*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>  
        </property>  
    </bean>
    
    <bean id="etlJobService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
         <property name="transactionManager" ref="transactionManager" />     
         <property name="target" ref="etlJobServiceTarget" />  
         <property name="proxyInterfaces" value="com.hausontech.hrs.api.etlProcess.service.IKettleJobService" /> 
        <property name="transactionAttributes">  
            <props>  
                <prop key="create*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>  
        </property>  
    </bean>
	<bean id="dataProcessServiceTarget" class="com.hausontech.hrs.serviceImpl.dataProcessing.DataProcessServiceImpl">
	</bean>
		
	<bean id="etlJobServiceTarget" class="com.hausontech.hrs.serviceImpl.etlProcess.KettleJobServiceImpl">
	</bean>
	
	<bean id="rptGenConfigServiceTarget" class="com.hausontech.hrs.serviceImpl.dimensionManager.RptGeneratorConfigServiceImpl">
	</bean>
	
	<bean id="rptSettingServiceTarget" class="com.hausontech.hrs.serviceImpl.reportSetting.RptSettingServiceImpl">
	</bean>
	
	<bean id="allocationRulesSettingService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
         <property name="transactionManager" ref="transactionManager" />     
         <property name="target" ref="allocationRulesSettingServiceTarget" />  
         <property name="proxyInterfaces" value="com.hausontech.hrs.api.allocationManager.service.IAllocationRulesSettingService" /> 
        <property name="transactionAttributes">  
            <props>  
                <prop key="create*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>  
        </property>  
    </bean>	
	
	<bean id="allocationRulesSettingServiceTarget" class="com.hausontech.hrs.serviceImpl.allocationManager.AllocationRulesSettingServiceImpl">
	</bean>
	
<!-- 	<bean id="roleConfigService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
         <property name="transactionManager" ref="transactionManager" />     
         <property name="target" ref="roleConfigServiceTarget" />  
         <property name="proxyInterfaces" value="com.hausontech.hrs.api.userManager.service.IRoleConfigService" /> 
        <property name="transactionAttributes">  
            <props>  
                <prop key="create*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="delete*">PROPAGATION_REQUIRED</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>  
        </property>  
    </bean>
    <bean id="roleConfigServiceTarget" class="com.hausontech.hrs.serviceImpl.userManager.RoleConfigServiceImpl">
	</bean> -->
	

	
	<!-- 启用springmvc -->
	<!-- conversion-service="conversionServiceFactoryBean"是让日期处理与spring发生关系 -->
	<!-- <mvc:annotation-driven conversion-service="conversionServiceFactoryBean" /> -->
	<mvc:annotation-driven />
	
	<!-- *****************************配置视图处理器************************ -->
	<!-- 视图处理器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
    
	<!-- 配置日期类型转换器
	<bean id="conversionServiceFactoryBean" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
			<bean class="com.eduask.test.DateConversion" />
			</list>
		</property>
	</bean> -->
		
</beans>