/*package com.hausontech.hrs.daoImpl.reportSetting;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import com.hausontech.hrs.api.reportSetting.dao.IRptSettingDao;
import com.hausontech.hrs.bean.AuditBean2;
import com.hausontech.hrs.bean.dimensionManager.DimensionBean;
import com.hausontech.hrs.bean.reportSetting.DimensionValueSetBean;
import com.hausontech.hrs.bean.reportSetting.ItemCalBean;
import com.hausontech.hrs.bean.reportSetting.ItemCodeExtHeaderBean;
import com.hausontech.hrs.bean.reportSetting.ItemCodeExtLineBean;
import com.hausontech.hrs.bean.reportSetting.ItemContentBean2;
import com.hausontech.hrs.bean.reportSetting.ItemGroupRuleHeaderBean;
import com.hausontech.hrs.bean.reportSetting.ItemGroupRuleLineBean;
import com.hausontech.hrs.bean.reportSetting.ItemHeaderBean;
import com.hausontech.hrs.bean.reportSetting.ItemLookUpHeaderBean;
import com.hausontech.hrs.bean.reportSetting.ItemLookUpLineBean;
import com.hausontech.hrs.bean.reportSetting.ItemRowCalculationBean;
import com.hausontech.hrs.bean.reportSetting.ItemRowSetHeaderBean;
import com.hausontech.hrs.bean.reportSetting.ItemRowSetLineBean;
import com.hausontech.hrs.daoImpl.BaseDaoImpl;
//import com.hausontech.hrs.daoImpl.ReportSettingController;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.CodeExtHeaderRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.DimValueSetRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.ItemContentRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.ItemHeaderRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.LookUpHeaderRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.RowSetHeaderRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.RowSetLineRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.RuleHeaderRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.RuleSetCalRowMapper;
import com.hausontech.hrs.daoImpl.reportSetting.mapper.ShortDimensionRowMapper;

public class RptSettingDaoImpl extends BaseDaoImpl implements IRptSettingDao {
	*//** 组件日志 *//*
//	private static Logger logger = LoggerFactory.getLogger(ReportSettingController.class);

	@Override
	public List<Map<String, Object>> getRuleHeaderList(ItemGroupRuleHeaderBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			sql.append(" HRS_DEF_RULE_HEADER.*, (RULE_CODE || '_' || DESCRIPTION) AS DISP_NAME ");			
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY RULE_CODE) AS row_number");
			}
			sql.append(" FROM HRS_DEF_RULE_HEADER ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveRuleHeader(ItemGroupRuleHeaderBean newRuleHeader) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_DEF_RULE_HEADER_S");
			newRuleHeader.setRuleHeaderId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_RULE_HEADER(RULE_HEADER_ID, RULE_CODE, DESCRIPTION,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:ruleHeaderId, :ruleCode, :description, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(newRuleHeader);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateRuleHeader(ItemGroupRuleHeaderBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_RULE_HEADER SET");
			sql.append(" RULE_CODE =NVL(:ruleCode,RULE_CODE),");
			sql.append(" DESCRIPTION =NVL(:description,DESCRIPTION),");
			sql.append(" LAST_UPDATE_DATE =NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY =NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE RULE_HEADER_ID=:ruleHeaderId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int getRuleHeaderReferencedNum(ItemGroupRuleHeaderBean record) throws SQLException {
		int referenceNumber = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ITEM_HEADER ");
			sql.append(" where RULE_CODE='" + record.getRuleCode() + "'");
			referenceNumber = (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return referenceNumber;
	}

	@Override
	public int deleteReferencedRuleLine(ItemGroupRuleHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_RULE_LINE");
			sql.append(" WHERE RULE_HEADER_ID=:ruleHeaderId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public int deleteRuleHeader(ItemGroupRuleHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_RULE_HEADER");
			sql.append(" WHERE RULE_HEADER_ID=:ruleHeaderId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public ItemGroupRuleHeaderBean getRuleHeaderByByPrimaryKey(int primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemGroupRuleHeaderBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" RULE_HEADER_ID, RULE_CODE, DESCRIPTION" + this.AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_DEF_RULE_HEADER ");
			sql.append(" WHERE RULE_HEADER_ID=" + primaryKey);
			result = (ItemGroupRuleHeaderBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new RuleHeaderRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public List<Map<String, Object>> getRuleLineList(ItemGroupRuleLineBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			sql.append(" t.* , d.dimension_name DESCRIPTION ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			}
			
			sql.append(" FROM HRS_DEF_RULE_LINE t, HRS_CORE_DIMENSION d ");
			sql.append(" WHERE t.dim_segment = d.dim_segment ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" AND " + strCondition);
			}
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveRuleLineRecord(ItemGroupRuleLineBean ruleLineRecord) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_DEF_RULE_LINE_S");
			ruleLineRecord.setRuleLineId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_RULE_LINE(RULE_LINE_ID, RULE_LINE_SEQ, RULE_HEADER_ID, DIM_SEGMENT,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:ruleLineId, :ruleLineSeq, :ruleHeaderId, :dimSegment, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(ruleLineRecord);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateRuleLineRecord(ItemGroupRuleLineBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_RULE_LINE SET");
			sql.append(" RULE_LINE_SEQ = NVL(:ruleLineSeq,RULE_LINE_SEQ),");
			sql.append(" RULE_HEADER_ID = NVL(:ruleHeaderId,RULE_HEADER_ID),");
			sql.append(" DIM_SEGMENT = NVL(:dimSegment,DIM_SEGMENT),");
			// sql.append(" DESCRIPTION =
			// NVL(:dimSegDescription,DESCRIPTION),");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE RULE_LINE_ID = :ruleLineId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int deleteRuleLineRecord(ItemGroupRuleLineBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_RULE_LINE");
			sql.append(" WHERE RULE_LINE_ID=:ruleLineId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public List<Map<String, Object>> getItmeHeaderList(ItemHeaderBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append("ITEM_HEADER_ID, ITEM_CODE, DESCRIPTION, RULE_CODE " + AUDIT_QUERY_STRING
						+ ", ROW_NUMBER() OVER (ORDER BY 1) AS row_number ,");
			} else {
				sql.append(" ITEM_HEADER_ID, ITEM_CODE, DESCRIPTION, RULE_CODE " + AUDIT_QUERY_STRING + ",");
			}

			sql.append(" CASE (SELECT COUNT(1) FROM HRS_DEF_ITEM_CONTENT b WHERE a.item_code = b.item_code) ");
			sql.append("  WHEN 0 THEN 'N' ELSE 'Y' END IS_CONTENT, ");
			sql.append(" CASE (SELECT COUNT(1) FROM HRS_DEF_ITEM_CALCULATION c WHERE c.item_code = a.item_code) ");
			sql.append("  WHEN 0 THEN 'N' ELSE 'Y' END IS_CALCULATION ");

			sql.append(" FROM HRS_DEF_ITEM_HEADER a");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
				System.out.println(sql);
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public ItemHeaderBean getItemHeaderByByPrimaryKey(long primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemHeaderBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" ITEM_HEADER_ID, ITEM_CODE, DESCRIPTION, RULE_CODE " + AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_DEF_ITEM_HEADER ");
			sql.append(" WHERE ITEM_HEADER_ID=" + primaryKey);
			result = (ItemHeaderBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new ItemHeaderRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public long saveItemHeader(ItemHeaderBean newItemHeader) throws DuplicateKeyException, SQLException {
		long primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = this.getAutoGeneratedPrimaryKey("HRS_DEF_ITEM_HEADER_S");
			newItemHeader.setItemHeaderId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_ITEM_HEADER(ITEM_HEADER_ID, ITEM_CODE, DESCRIPTION, RULE_CODE, START_DATE, "
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:itemHeaderId, :itemCode, :itemDescription, :ruleCode, :startDate, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(newItemHeader);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateItemHeader(ItemHeaderBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ITEM_HEADER SET");
			sql.append(" ITEM_CODE =NVL(:itemCode,ITEM_CODE),");
			sql.append(" DESCRIPTION =NVL(:itemDescription,DESCRIPTION),");
			sql.append(" RULE_CODE =NVL(:ruleCode,RULE_CODE),");
			sql.append(" LAST_UPDATE_DATE =NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY =NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ITEM_HEADER_ID=:itemHeaderId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int deleteItemHeader(ItemHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ITEM_HEADER");
			sql.append(" WHERE ITEM_HEADER_ID=:itemHeaderId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public List<Map<String, Object>> getItemContentList(ItemContentBean2 queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" HRS_DEF_ITEM_CONTENT_V.*, ROW_NUMBER() OVER (ORDER BY LINE_NUM) AS row_number");
			} else {
				sql.append(" HRS_DEF_ITEM_CONTENT_V.*");
			}

			sql.append(" FROM HRS_DEF_ITEM_CONTENT_V ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public List<Map<String, Object>> getItemCalculationList(ItemCalBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			sql.append(" HRS_DEF_ITEM_CALCULATION.* ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			}
			sql.append(" FROM HRS_DEF_ITEM_CALCULATION ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			sql.append(" ORDER BY LINE_NUM ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}
	
	@Override
	public List<Map<String, Object>> getCalItemList(ItemHeaderBean queryBean) throws SQLException {
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			sql.append(" ITEM_CODE, DESCRIPTION, (ITEM_CODE || '_' || DESCRIPTION) AS DISP_NAME");
			sql.append(" FROM HRS_DEF_ITEM_HEADER ");
			sql.append(" WHERE RULE_CODE = '" + queryBean.getRuleCode() + "'");
			sql.append(" ORDER BY ITEM_CODE ");
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}
	
	@Override
	public int getItemCalculationCount(ItemCalBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ITEM_CALCULATION ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}
	
	
	@Override
	public int saveItemCalculation(ItemCalBean newItemCalBean) throws SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int)this.getAutoGeneratedPrimaryKey("HRS_DEF_ITEM_CALCULATION_S");
			newItemCalBean.setItemCalId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_ITEM_CALCULATION(ITEM_CAL_ID, ITEM_HEADER_ID, ITEM_CODE, LINE_NUM, SIGN, CAL_ITEM_CODE, CONSTANT, "
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:itemCalId, :itemHeaderId, :itemCode, :lineNum, :sign, :calItemCode, :constant, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(newItemCalBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);// ,
																// generatedKeyHolder,
																// new
																// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}
	
	@Override
	public int updateItemCaculation(ItemCalBean updItemCalBean) throws SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ITEM_CALCULATION SET");
			sql.append(" ITEM_HEADER_ID = NVL(:itemHeaderId, ITEM_HEADER_ID),");
			sql.append(" ITEM_CODE = NVL(:itemCode,ITEM_CODE),");
			sql.append(" LINE_NUM = NVL(:lineNum,LINE_NUM),");
			sql.append(" SIGN = NVL(:sign,SIGN),");
			sql.append(" CAL_ITEM_CODE = NVL(:calItemCode,CAL_ITEM_CODE),");
			sql.append(" CONSTANT = NVL(:constant,CONSTANT),");
			// sql.append(" DESCRIPTION =
			// NVL(:dimSegDescription,DESCRIPTION),");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ITEM_CAL_ID = :itemCalId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(updItemCalBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																						// generatedKeyHolder,
																						// new
																						// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}
	
	@Override
	public int deleteItemCalculation(ItemCalBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ITEM_CALCULATION");
			sql.append(" WHERE ITEM_CAL_ID=:itemCalId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public ItemContentBean2 getItemContentByByPrimaryKey(int primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemContentBean2 result = null;
		try {
			sql.append("SELECT ");
			sql.append(
					" ITEM_CONTENT_ID, ITEM_HEADER_ID, ITEM_CODE, LINE_NUM, SIGN, SEGMENT1_LOW, SEGMENT1_HIGH,SEGMENT1_TYPE, ");
			sql.append(
					" SEGMENT2_LOW, SEGMENT2_HIGH, SEGMENT2_TYPE, SEGMENT3_LOW, SEGMENT3_HIGH, SEGMENT3_TYPE, SEGMENT4_LOW, SEGMENT4_HIGH, SEGMENT4_TYPE,");
			sql.append(
					" SEGMENT5_LOW, SEGMENT5_HIGH, SEGMENT5_TYPE, SEGMENT6_LOW, SEGMENT6_HIGH, SEGMENT6_TYPE, SEGMENT7_LOW, SEGMENT7_HIGH, SEGMENT7_TYPE,");
			sql.append(
					" SEGMENT8_LOW, SEGMENT8_HIGH, SEGMENT8_TYPE, SEGMENT9_LOW, SEGMENT9_HIGH, SEGMENT9_TYPE, SEGMENT10_LOW, SEGMENT10_HIGH, SEGMENT10_TYPE,");
			sql.append(
					" SEGMENT11_LOW, SEGMENT11_HIGH, SEGMENT11_TYPE, SEGMENT12_LOW, SEGMENT12_HIGH, SEGMENT12_TYPE, SEGMENT13_LOW, SEGMENT13_HIGH, SEGMENT13_TYPE,");
			sql.append(
					" SEGMENT14_LOW, SEGMENT14_HIGH, SEGMENT14_TYPE, SEGMENT15_LOW, SEGMENT15_HIGH, SEGMENT15_TYPE, SEGMENT16_LOW, SEGMENT16_HIGH, SEGMENT16_TYPE,");
			sql.append(
					" SEGMENT17_LOW, SEGMENT17_HIGH, SEGMENT17_TYPE, SEGMENT18_LOW, SEGMENT18_HIGH, SEGMENT18_TYPE, SEGMENT19_LOW, SEGMENT19_HIGH, SEGMENT19_TYPE,");
			sql.append(" SEGMENT20_LOW, SEGMENT20_HIGH, SEGMENT20_TYPE " + AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_DEF_ITEM_CONTENT ");
			sql.append(" WHERE ITEM_CONTENT_ID=" + primaryKey);

			result = (ItemContentBean2) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new ItemContentRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public int saveItemContenHeader(ItemContentBean2 itemContentHeader) throws SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_DEF_ITEM_CONTENT_S");
			itemContentHeader.setItemContentId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_ITEM_CONTENT(ITEM_CONTENT_ID, ITEM_HEADER_ID, ITEM_CODE, LINE_NUM, SIGN,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:itemContentId, :itemHeaderId, :itemCode, :lineNum, :sign, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(itemContentHeader);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);// ,
																// generatedKeyHolder,
																// new
																// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateItemContenHeader(ItemContentBean2 record) throws SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ITEM_CONTENT SET");
			sql.append(" ITEM_CONTENT_ID = NVL(:itemContentId,ITEM_CONTENT_ID),");
			sql.append(" ITEM_HEADER_ID = NVL(:itemHeaderId,ITEM_HEADER_ID),");
			sql.append(" ITEM_CODE = NVL(:itemCode,ITEM_CODE),");
			sql.append(" LINE_NUM = NVL(:lineNum,LINE_NUM),");
			sql.append(" SIGN = NVL(:sign, SIGN),");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ITEM_CONTENT_ID = :itemContentId");
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																						// generatedKeyHolder,
																						// new
																						// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int deleteItemContentHeaderRecord(ItemContentBean2 record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ITEM_CONTENT");
			sql.append(" WHERE ITEM_CONTENT_ID=:itemContentId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public List<DimensionValueSetBean> getDimensionValueSetList() throws SQLException {
		StringBuffer sql = new StringBuffer();
		List<DimensionValueSetBean> result = null;
		try {
			sql.append("SELECT ");
			sql.append(" a.DIMENSION_ID, a.DIMENSION_CODE, a.DIMENSION_NAME, a.DIM_SEGMENT, ");
			sql.append(" b.DIM_VALUE_ID, b.DIM_VALUE, b.DESCRIPTION, b.SUMMARY_FLAG ");
			sql.append(" FROM HRS_CORE_DIMENSION a, HRS_CORE_DIMENSION_VALUE b ");
			sql.append(" WHERE a.DIMENSION_ID = b.DIMENSION_ID");
			sql.append(" ORDER BY a.DIMENSION_CODE");
			result = namedjdbcTemplate.getJdbcOperations().query(sql.toString(), new DimValueSetRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}
	
	
	@Override
	public List<DimensionBean> getConfigurableLowHighDimList() throws SQLException {
		StringBuffer sql = new StringBuffer();
		List<DimensionBean> result = null;
		try {
			sql.append("SELECT DISTINCT ");
			sql.append(" a.DIMENSION_ID, a.DIMENSION_CODE, a.DIMENSION_NAME, a.DIM_SEGMENT ");
			sql.append(" FROM HRS_CORE_DIMENSION a ");
			sql.append(" ORDER BY a.DIMENSION_CODE");
			result = namedjdbcTemplate.getJdbcOperations().query(sql.toString(), new ShortDimensionRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public int updateItemContenLowHigh(ItemContentBean2 record) throws SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ITEM_CONTENT SET");
			sql.append(" SEGMENT1_LOW = NVL(:segment1Low,SEGMENT1_LOW),");
			sql.append(" SEGMENT1_HIGH = NVL(:segment1Hign,SEGMENT1_HIGH),");
			sql.append(" SEGMENT1_TYPE = NVL(:segment1Type,SEGMENT1_TYPE),");
			sql.append(" SEGMENT2_LOW = NVL(:segment2Low,SEGMENT2_LOW),");
			sql.append(" SEGMENT2_HIGH = NVL(:segment2Hign,SEGMENT2_HIGH),");
			sql.append(" SEGMENT2_TYPE = NVL(:segment2Type,SEGMENT2_TYPE),");
			sql.append(" SEGMENT3_LOW = NVL(:segment3Low,SEGMENT3_LOW),");
			sql.append(" SEGMENT3_HIGH = NVL(:segment3Hign,SEGMENT3_HIGH),");
			sql.append(" SEGMENT3_TYPE = NVL(:segment3Type,SEGMENT3_TYPE),");
			sql.append(" SEGMENT4_LOW = NVL(:segment4Low,SEGMENT4_LOW),");
			sql.append(" SEGMENT4_HIGH = NVL(:segment4Hign,SEGMENT4_HIGH),");
			sql.append(" SEGMENT4_TYPE = NVL(:segment4Type,SEGMENT4_TYPE),");
			sql.append(" SEGMENT5_LOW = NVL(:segment5Low,SEGMENT5_LOW),");
			sql.append(" SEGMENT5_HIGH = NVL(:segment5Hign,SEGMENT5_HIGH),");
			sql.append(" SEGMENT5_TYPE = NVL(:segment5Type,SEGMENT5_TYPE),");
			sql.append(" SEGMENT6_LOW = NVL(:segment6Low,SEGMENT6_LOW),");
			sql.append(" SEGMENT6_HIGH = NVL(:segment6Hign,SEGMENT6_HIGH),");
			sql.append(" SEGMENT6_TYPE = NVL(:segment6Type,SEGMENT6_TYPE),");
			sql.append(" SEGMENT7_LOW = NVL(:segment7Low,SEGMENT7_LOW),");
			sql.append(" SEGMENT7_HIGH = NVL(:segment7Hign,SEGMENT7_HIGH),");
			sql.append(" SEGMENT7_TYPE = NVL(:segment7Type,SEGMENT7_TYPE),");
			sql.append(" SEGMENT8_LOW = NVL(:segment8Low,SEGMENT8_LOW),");
			sql.append(" SEGMENT8_HIGH = NVL(:segment8Hign,SEGMENT8_HIGH),");
			sql.append(" SEGMENT8_TYPE = NVL(:segment8Type,SEGMENT8_TYPE),");
			sql.append(" SEGMENT9_LOW = NVL(:segment9Low,SEGMENT9_LOW),");
			sql.append(" SEGMENT9_HIGH = NVL(:segment9Hign,SEGMENT9_HIGH),");
			sql.append(" SEGMENT9_TYPE = NVL(:segment9Type,SEGMENT9_TYPE),");
			sql.append(" SEGMENT10_LOW = NVL(:segment10Low,SEGMENT10_LOW),");
			sql.append(" SEGMENT10_HIGH = NVL(:segment10Hign,SEGMENT10_HIGH),");
			sql.append(" SEGMENT10_TYPE = NVL(:segment10Type,SEGMENT10_TYPE),");
			sql.append(" SEGMENT11_LOW = NVL(:segment11Low,SEGMENT11_LOW),");
			sql.append(" SEGMENT11_HIGH = NVL(:segment11Hign,SEGMENT11_HIGH),");
			sql.append(" SEGMENT11_TYPE = NVL(:segment11Type,SEGMENT11_TYPE),");
			sql.append(" SEGMENT12_LOW = NVL(:segment12Low,SEGMENT12_LOW),");
			sql.append(" SEGMENT12_HIGH = NVL(:segment12Hign,SEGMENT12_HIGH),");
			sql.append(" SEGMENT12_TYPE = NVL(:segment12Type,SEGMENT12_TYPE),");
			sql.append(" SEGMENT13_LOW = NVL(:segment13Low,SEGMENT13_LOW),");
			sql.append(" SEGMENT13_HIGH = NVL(:segment13Hign,SEGMENT13_HIGH),");
			sql.append(" SEGMENT13_TYPE = NVL(:segment13Type,SEGMENT13_TYPE),");
			sql.append(" SEGMENT14_LOW = NVL(:segment14Low,SEGMENT14_LOW),");
			sql.append(" SEGMENT14_HIGH = NVL(:segment14Hign,SEGMENT14_HIGH),");
			sql.append(" SEGMENT14_TYPE = NVL(:segment14Type,SEGMENT14_TYPE),");
			sql.append(" SEGMENT15_LOW = NVL(:segment15Low,SEGMENT15_LOW),");
			sql.append(" SEGMENT15_HIGH = NVL(:segment15Hign,SEGMENT15_HIGH),");
			sql.append(" SEGMENT15_TYPE = NVL(:segment15Type,SEGMENT15_TYPE),");
			sql.append(" SEGMENT16_LOW = NVL(:segment16Low,SEGMENT16_LOW),");
			sql.append(" SEGMENT16_HIGH = NVL(:segment16Hign,SEGMENT16_HIGH),");
			sql.append(" SEGMENT16_TYPE = NVL(:segment16Type,SEGMENT16_TYPE),");
			sql.append(" SEGMENT17_LOW = NVL(:segment17Low,SEGMENT17_LOW),");
			sql.append(" SEGMENT17_HIGH = NVL(:segment17Hign,SEGMENT17_HIGH),");
			sql.append(" SEGMENT17_TYPE = NVL(:segment17Type,SEGMENT17_TYPE),");
			sql.append(" SEGMENT18_LOW = NVL(:segment18Low,SEGMENT18_LOW),");
			sql.append(" SEGMENT18_HIGH = NVL(:segment18Hign,SEGMENT18_HIGH),");
			sql.append(" SEGMENT18_TYPE = NVL(:segment18Type,SEGMENT18_TYPE),");
			sql.append(" SEGMENT19_LOW = NVL(:segment19Low,SEGMENT19_LOW),");
			sql.append(" SEGMENT19_HIGH = NVL(:segment19Hign,SEGMENT19_HIGH),");
			sql.append(" SEGMENT19_TYPE = NVL(:segment19Type,SEGMENT19_TYPE),");
			sql.append(" SEGMENT20_LOW = NVL(:segment20Low,SEGMENT20_LOW),");
			sql.append(" SEGMENT20_HIGH = NVL(:segment20Hign,SEGMENT20_HIGH),");
			sql.append(" SEGMENT20_TYPE = NVL(:segment20Type,SEGMENT20_TYPE),");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ITEM_CONTENT_ID = :itemContentId");
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																						// generatedKeyHolder,
																						// new
																						// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public List<Map<String, Object>> getExtHeaderList(ItemCodeExtHeaderBean codeExtHeaderBean) throws SQLException {
		String strCondition = buildCondition(codeExtHeaderBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			sql.append(" HRS_CORE_EXTERNAL_ITEM_TYPE.*, (ITEM_TYPE || '_' || DESCRIPTION) AS DISP_NAME");
			if (codeExtHeaderBean.getRowStartIndex() != 0 && codeExtHeaderBean.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY ITEM_TYPE) AS row_number");
			} 
			sql.append(" FROM HRS_CORE_EXTERNAL_ITEM_TYPE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (codeExtHeaderBean.getRowStartIndex() != 0 && codeExtHeaderBean.getRowCount() != 0) {
				sql = this.pageSql(sql, codeExtHeaderBean.getRowStartIndex(), codeExtHeaderBean.getRowCount());
			}
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveCodeExtHeader(ItemCodeExtHeaderBean queryBean) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_CORE_EXTERNAL_ITEM_TYPE_S");
			queryBean.setExtItemTypeId(primaryKey);
			String sql = "INSERT INTO HRS_CORE_EXTERNAL_ITEM_TYPE(ITEM_TYPE_ID, ITEM_TYPE, DESCRIPTION,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:extItemTypeId, :extItemType, :description, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(queryBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);// ,
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateCodeExtHeader(ItemCodeExtHeaderBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_EXTERNAL_ITEM_TYPE SET");
			sql.append(" ITEM_TYPE =:extItemType,");
			sql.append(" DESCRIPTION =:description,");
			sql.append(" LAST_UPDATE_DATE =:lastUpdateDate,");
			sql.append(" LAST_UPDATED_BY =:lastUpdatedBy");
			sql.append(" WHERE ITEM_TYPE_ID=:extItemTypeId");
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int getCodeExtHeaderReferencedNum(ItemCodeExtHeaderBean record) throws SQLException {
		int referenceNumber = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_EXTERNAL_ITEM_TYPE ");
			sql.append(" where ITEM_TYPE='" + record.getExtItemType() + "'");
			referenceNumber = (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}

		System.out.println(referenceNumber + "!!!!!!!!!!!!!473    getCodeExtHeaderReferencedNum");
		return referenceNumber;
	}

	@Override
	public int deleteCodeExtHeader(ItemCodeExtHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_CORE_EXTERNAL_ITEM_TYPE");
			sql.append(" WHERE ITEM_TYPE_ID=:extItemTypeId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public int deleteReferencedCodeExtLine(ItemCodeExtHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_CORE_EXTERNAL_ITEM_VALUE");
			sql.append(" WHERE ITEM_TYPE_ID=:extItemTypeId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public ItemCodeExtHeaderBean getCodeExtHeaderByByPrimaryKey(int primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemCodeExtHeaderBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" ITEM_TYPE_ID, ITEM_TYPE, DESCRIPTION" + this.AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_CORE_EXTERNAL_ITEM_TYPE ");
			sql.append(" WHERE ITEM_TYPE_ID=" + primaryKey);
			result = (ItemCodeExtHeaderBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new CodeExtHeaderRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public List<Map<String, Object>> getLookUpHeaderList(ItemLookUpHeaderBean lookUpHeaderBean) throws SQLException {

		String strCondition = buildCondition(lookUpHeaderBean);

		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (lookUpHeaderBean.getRowStartIndex() != 0 && lookUpHeaderBean.getRowCount() != 0) {
				sql.append(" HRS_CORE_LOOKUP_TYPE.*, ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			} else {
				sql.append(" HRS_CORE_LOOKUP_TYPE.*");
			}
			sql.append(" FROM HRS_CORE_LOOKUP_TYPE ");

			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (lookUpHeaderBean.getRowStartIndex() != 0 && lookUpHeaderBean.getRowCount() != 0) {
				sql = this.pageSql(sql, lookUpHeaderBean.getRowStartIndex(), lookUpHeaderBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveLookUpHeader(ItemLookUpHeaderBean queryBean) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_CORE_LOOKUP_TYPE_S");
			queryBean.setLookUpTypeId(primaryKey);
			String sql = "INSERT INTO HRS_CORE_LOOKUP_TYPE(LOOKUP_TYPE_ID, LOOKUP_TYPE, DESCRIPTION,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:lookUpTypeId, :lookUpType, :description, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(queryBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateLookUpHeader(ItemLookUpHeaderBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_LOOKUP_TYPE SET");
			sql.append(" LOOKUP_TYPE =:lookUpType,");
			sql.append(" DESCRIPTION =:description,");
			sql.append(" LAST_UPDATE_DATE =:lastUpdateDate,");
			sql.append(" LAST_UPDATED_BY =:lastUpdatedBy");
			sql.append(" WHERE LOOKUP_TYPE_ID=:lookUpTypeId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int deleteLookUpHeader(ItemLookUpHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_CORE_LOOKUP_TYPE");
			sql.append(" WHERE LOOKUP_TYPE_ID=:lookUpTypeId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public int deleteReferencedLookUpLine(ItemLookUpHeaderBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_CORE_LOOKUP_VALUE");
			sql.append(" WHERE LOOKUP_TYPE_ID=:lookUpTypeId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public ItemLookUpHeaderBean getLookUpHeaderByByPrimaryKey(int primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemLookUpHeaderBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" LOOKUP_TYPE_ID, LOOKUP_TYPE, DESCRIPTION" + this.AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_CORE_LOOKUP_TYPE ");
			sql.append(" WHERE LOOKUP_TYPE_ID=" + primaryKey);
			result = (ItemLookUpHeaderBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new LookUpHeaderRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}

		return result;
	}

	*//**
	 * Build condtion for query
	 * 
	 * @param condition
	 * @return
	 *//*
	private String buildCondition(AuditBean2 condition) {
		StringBuffer sb = new StringBuffer();
		if (condition != null) {
			if (condition instanceof ItemGroupRuleHeaderBean) {
				ItemGroupRuleHeaderBean searchBean = (ItemGroupRuleHeaderBean) condition;
				if (null != searchBean && searchBean.getRuleHeaderId() != 0) {
					sb.append("RULE_HEADER_ID=" + searchBean.getRuleHeaderId() + " ");
					return sb.toString();
				}
				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != searchBean && !searchBean.isEmpty()) {
					String ruleCode = searchBean.getRuleCode();

					if (null != ruleCode && !ruleCode.isEmpty()) {
						sb.append(" RULE_CODE like'" + "%" + ruleCode + "%" + "'");
					}

					String ruleName = searchBean.getDescription();
					if (null != ruleName && !ruleName.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" DESCRIPTION like '" + "%" + ruleName + "%" + "'");
					}
				}
			} else if (condition instanceof ItemGroupRuleLineBean) {
				ItemGroupRuleLineBean lineBean = (ItemGroupRuleLineBean) condition;
				if (null != lineBean && lineBean.getRuleLineId() != 0) {
					sb.append("RULE_LINE_ID=" + lineBean.getRuleLineId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != lineBean && !lineBean.isEmpty()) {
					if (lineBean.getRuleHeaderId() != 0) {
						sb.append(" RULE_HEADER_ID = " + lineBean.getRuleHeaderId() + " ");
					}
					String dimCode = lineBean.getDimSegment();
					if (null != dimCode && !dimCode.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" DIM_SEGMENT like  '" + "%" + dimCode + "%" + "' ");
					}

				}
			} else if (condition instanceof ItemHeaderBean) {
				ItemHeaderBean itemBean = (ItemHeaderBean) condition;
				if (null != itemBean && itemBean.getItemHeaderId() != 0) {
					sb.append("a.ITEM_HEADER_ID=" + itemBean.getItemHeaderId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != itemBean && !itemBean.isEmpty()) {

					if (!StringUtils.isBlank(itemBean.getRuleCode())) {
						sb.append(" a.RULE_CODE = '" + itemBean.getRuleCode() + "' ");
						System.out.println(itemBean.getRuleCode() + "121212122121" + sb);

					}
					if (!StringUtils.isBlank(itemBean.getItemCode())) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" a.ITEM_CODE = '" + itemBean.getItemCode() + "' ");
					}
					if (!StringUtils.isBlank(itemBean.getItemDescription())) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append("a. DESCRIPTION = '" + itemBean.getItemDescription() + "' ");
					}
				}
			} else if (condition instanceof ItemContentBean2) {
				ItemContentBean2 contentBean = (ItemContentBean2) condition;
				if (null != contentBean && contentBean.getItemContentId() != 0) {
					sb.append("ITEM_CONTENT_ID=" + contentBean.getItemContentId() + " ");
					return sb.toString();
				}
				long itemHeaderId = contentBean.getItemHeaderId();
				if (itemHeaderId != 0) {
					sb.append("ITEM_HEADER_ID=" + itemHeaderId + " ");
				}
			} else if (condition instanceof ItemCodeExtHeaderBean) {
				ItemCodeExtHeaderBean searchBean = (ItemCodeExtHeaderBean) condition;
				if (null != searchBean && searchBean.getExtItemTypeId() != 0) {
					sb.append("ITEM_TYPE_ID=" + searchBean.getExtItemTypeId() + " ");

					// System.out.println("324dao!!!!!!");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != searchBean && !searchBean.isEmpty()) {
					String codeCode = searchBean.getExtItemType();
					// System.out.println(codeCode+"!!!!!!!!!!");
					if (null != codeCode && !codeCode.isEmpty()) {
						sb.append(" ITEM_TYPE like '" + "%" + codeCode + "%" + "' ");
					}

					String codeName = searchBean.getDescription();
					if (null != codeName && !codeName.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" DESCRIPTION like '" + "%" + codeName + "%" + "' ");
					}

				}
			} else if (condition instanceof ItemCodeExtLineBean) {
				ItemCodeExtLineBean lineBean = (ItemCodeExtLineBean) condition;
				if (null != lineBean && lineBean.getExtItemValueId() != 0) {
					sb.append("ITEM_VALUE_ID=" + lineBean.getExtItemValueId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != lineBean && !lineBean.isEmpty()) {
					if (lineBean.getExtItemTypeId() != 0) {
						sb.append(" ITEM_TYPE_ID = " + lineBean.getExtItemTypeId() + " ");
					}
					String dimCode = lineBean.getExtItemValue();
					if (null != dimCode && !dimCode.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append("   ITEM_VALUE like '" + "%" + dimCode + "%" + "' ");
					}
					String dimDescription = lineBean.getDescription();
					if (null != dimDescription && !dimDescription.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append("   DESCRIPTION = '" + dimDescription + "' ");
					}
				}
			} else if (condition instanceof ItemLookUpHeaderBean) {
				ItemLookUpHeaderBean searchBean = (ItemLookUpHeaderBean) condition;
				if (null != searchBean && searchBean.getLookUpTypeId() != 0) {
					sb.append("LOOKUP_TYPE_ID=" + searchBean.getLookUpTypeId() + " ");
					return sb.toString();
				}
				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != searchBean && !searchBean.isEmpty()) {
					String codeCode = searchBean.getLookUpType();
					if (null != codeCode && !codeCode.isEmpty()) {
						sb.append(" LOOKUP_TYPE like '" + "%" + codeCode + "%" + "' ");
					}
					String codeName = searchBean.getDescription();
					if (null != codeName && !codeName.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" DESCRIPTION like  '" + "%" + codeName + "%" + "' ");
					}
				}
			} else if (condition instanceof ItemLookUpLineBean) {
				ItemLookUpLineBean lineBean = (ItemLookUpLineBean) condition;
				if (null != lineBean && lineBean.getLookUpValueId() != 0) {
					sb.append("LOOKUP_VALUE_ID=" + lineBean.getLookUpValueId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != lineBean && !lineBean.isEmpty()) {
					if (lineBean.getLookUpTypeId() != 0) {
						sb.append(" LOOKUP_TYPE_ID = " + lineBean.getLookUpTypeId() + " ");
					}
					String dimCode = lineBean.getLookUpValue();
					if (null != dimCode && !dimCode.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" LOOKUP_VALUE like  '" + "%" + dimCode + "%" + "' ");
					}
				}
			}

			else if (condition instanceof ItemRowSetHeaderBean) {
				ItemRowSetHeaderBean lineBean = (ItemRowSetHeaderBean) condition;
				if (null != lineBean && lineBean.getRowSetId() != 0) {
					sb.append("ROW_SET_ID=" + lineBean.getRowSetId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != lineBean && !lineBean.isEmpty()) {
					String rowName = lineBean.getRowSetName();
					if (null != rowName && !rowName.isEmpty()) {
						sb.append(" ROW_SET_NAME like '" + "%" + rowName + "%" + "' ");
					}
					String dimDescription = lineBean.getDescription();
					if (null != dimDescription && !dimDescription.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
							// System.out.println(sb+"!!!????"+dimDescription);
						}
						sb.append(" DESCRIPTION like '" + "%" + dimDescription + "%" + "' ");
					}
				}
			} else if (condition instanceof ItemRowSetLineBean) {
				ItemRowSetLineBean lineBean = (ItemRowSetLineBean) condition;
				if (null != lineBean && lineBean.getRowId() != 0) {
					sb.append("ROW_ID=" + lineBean.getRowId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != lineBean && !lineBean.isEmpty()) {
					if (lineBean.getRowSetId() != 0) {
						sb.append(" ROW_SET_ID = " + lineBean.getRowSetId() + " ");
					}
					if (lineBean.getLineNum() != 0) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" LINE_NUM = " + lineBean.getLineNum() + " ");
					}

					String rowName = lineBean.getRowName();
					if (null != rowName && !rowName.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" ROW_NAME like '" + "%" + rowName + "%" + "' ");
					}
					if (lineBean.getRowNum() != 0) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" ROW_NUM = " + lineBean.getRowNum() + " ");
					}
					String dimChangsign = lineBean.getChangeSign();
					if (null != dimChangsign && !dimChangsign.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" CHANGE_SIGN = '" + dimChangsign + "' ");
					}

					String displayFlag = lineBean.getDisplayFlag();
					if (null != displayFlag && !displayFlag.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" DISPLAY_FLAG = '" + displayFlag + "' ");
					}

					String externalCode = lineBean.getExternalCode();
					if (null != externalCode && !externalCode.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append("EXTERNAL_CODE = '" + externalCode + "' ");
					}
				}
			} else if (condition instanceof ItemRowCalculationBean) {
				ItemRowCalculationBean lineBean = (ItemRowCalculationBean) condition;
				if (null != lineBean && lineBean.getRowCalId() != 0) {
					sb.append("ROW_CAL_ID=" + lineBean.getRowCalId() + " ");
					return sb.toString();
				}

				// 前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if (null != lineBean && !lineBean.isEmpty()) {
					if (lineBean.getRowId() != 0) {
						sb.append(" ROW_ID = " + lineBean.getRowId() + " ");
					}
					if (lineBean.getRowCalNum() != 0) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" ROW_CAL_NUM = " + lineBean.getRowCalNum() + " ");
					}

					String rowName = lineBean.getSign();
					if (null != rowName && !rowName.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" SIGN = '" + rowName + "' ");
					}

					String dimChangsign = lineBean.getCalItemCode();
					if (null != dimChangsign && !dimChangsign.isEmpty()) {
						if (sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" CAL_ITEM_CODE like '" + "%" + dimChangsign + "%" + "' ");
					}

				}
			}  else if (condition instanceof ItemCalBean) {
				ItemCalBean itemCalBean = (ItemCalBean) condition;
				if (null != itemCalBean && itemCalBean.getItemHeaderId() != 0) {
					sb.append("ITEM_HEADER_ID=" + itemCalBean.getItemHeaderId() + " ");
					return sb.toString();
				}
			}
		}
		return sb.toString();
	}

	@Override
	public List<Map<String, Object>> getCodeExtLineList(ItemCodeExtLineBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" HRS_CORE_EXTERNAL_ITEM_VALUE.*, ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			} else {
				sql.append(" HRS_CORE_EXTERNAL_ITEM_VALUE.*");
			}

			sql.append(" FROM HRS_CORE_EXTERNAL_ITEM_VALUE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveCodeExtLineRecord(ItemCodeExtLineBean queryBean) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_CORE_EXTERNAL_ITEM_VALUE_S");
			queryBean.setExtItemValueId(primaryKey);
			String sql = "INSERT INTO HRS_CORE_EXTERNAL_ITEM_VALUE(ITEM_VALUE_ID, ITEM_TYPE_ID, ITEM_VALUE, DESCRIPTION,START_DATE,END_DATE,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:extItemValueId, :extItemTypeId, :extItemValue, :description, :startDate, :endDate, :attribute1, :attribute2, :attribute3, :attribute4, :attribute5, :attribute6, :attribute7, :attribute8, :attribute9, :attribute10 ,"
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(queryBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateCodeExtLineRecord(ItemCodeExtLineBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_EXTERNAL_ITEM_VALUE SET");

			sql.append(" ITEM_TYPE_ID = NVL(:extItemTypeId,ITEM_TYPE_ID),");
			sql.append(" ITEM_VALUE = NVL(:extItemValue,ITEM_VALUE),");
			sql.append(" DESCRIPTION = NVL(:description,DESCRIPTION),");
			sql.append(" START_DATE = NVL(:startDate,START_DATE),");
			sql.append(" END_DATE = NVL(:endDate,END_DATE),");
			sql.append(" ATTRIBUTE1 = NVL(:attribute1,ATTRIBUTE1),");
			sql.append(" ATTRIBUTE2 = NVL(:attribute2,ATTRIBUTE2),");
			sql.append(" ATTRIBUTE3 = NVL(:attribute3,ATTRIBUTE3),");
			sql.append(" ATTRIBUTE4 = NVL(:attribute4,ATTRIBUTE4),");
			sql.append(" ATTRIBUTE5 = NVL(:attribute5,ATTRIBUTE5),");
			sql.append(" ATTRIBUTE6 = NVL(:attribute6,ATTRIBUTE6),");
			sql.append(" ATTRIBUTE7 = NVL(:attribute7,ATTRIBUTE7),");
			sql.append(" ATTRIBUTE8 = NVL(:attribute8,ATTRIBUTE8),");
			sql.append(" ATTRIBUTE9 = NVL(:attribute9,ATTRIBUTE9),");
			sql.append(" ATTRIBUTE10 = NVL(:attribute10,ATTRIBUTE10),");

			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ITEM_VALUE_ID = :extItemValueId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public List<Map<String, Object>> getLookUpLineList(ItemLookUpLineBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {

				sql.append(" HRS_CORE_LOOKUP_VALUE.*, ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			} else {
				sql.append(" HRS_CORE_LOOKUP_VALUE.*");
			}

			sql.append(" FROM HRS_CORE_LOOKUP_VALUE ");

			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveLookUpLineRecord(ItemLookUpLineBean queryBean) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_CORE_LOOKUP_VALUE_S");
			queryBean.setLookUpValueId(primaryKey);
			String sql = "INSERT INTO HRS_CORE_LOOKUP_VALUE(LOOKUP_VALUE_ID, LOOKUP_TYPE_ID, LOOKUP_VALUE, DESCRIPTION,START_DATE,END_DATE,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:lookUpValueId, :lookUpTypeId, :lookUpValue, :description, :startDate, :endDate, :attribute1, :attribute2, :attribute3, :attribute4, :attribute5, :attribute6, :attribute7, :attribute8, :attribute9, :attribute10 ,"
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(queryBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateLookUpLineRecord(ItemLookUpLineBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_LOOKUP_VALUE SET");

			sql.append(" LOOKUP_TYPE_ID = NVL(:lookUpTypeId,LOOKUP_TYPE_ID),");
			sql.append(" LOOKUP_VALUE = NVL(:lookUpValue,LOOKUP_VALUE),");
			sql.append(" DESCRIPTION = NVL(:description,DESCRIPTION),");
			sql.append(" START_DATE = NVL(:startDate,START_DATE),");
			sql.append(" END_DATE = NVL(:endDate,END_DATE),");
			sql.append(" ATTRIBUTE1 = NVL(:attribute1,ATTRIBUTE1),");
			sql.append(" ATTRIBUTE2 = NVL(:attribute2,ATTRIBUTE2),");
			sql.append(" ATTRIBUTE3 = NVL(:attribute3,ATTRIBUTE3),");
			sql.append(" ATTRIBUTE4 = NVL(:attribute4,ATTRIBUTE4),");
			sql.append(" ATTRIBUTE5 = NVL(:attribute5,ATTRIBUTE5),");
			sql.append(" ATTRIBUTE6 = NVL(:attribute6,ATTRIBUTE6),");
			sql.append(" ATTRIBUTE7 = NVL(:attribute7,ATTRIBUTE7),");
			sql.append(" ATTRIBUTE8 = NVL(:attribute8,ATTRIBUTE8),");
			sql.append(" ATTRIBUTE9 = NVL(:attribute9,ATTRIBUTE9),");
			sql.append(" ATTRIBUTE10 = NVL(:attribute10,ATTRIBUTE10),");

			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE LOOKUP_VALUE_ID = :lookUpValueId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public List<Map<String, Object>> getRowSetHeaderList(ItemRowSetHeaderBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" HRS_DEF_ROW_SET.*, ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			} else {
				sql.append(" HRS_DEF_ROW_SET.*");
			}
			sql.append(" FROM HRS_DEF_ROW_SET ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveRowSetHeader(ItemRowSetHeaderBean queryBean) throws DuplicateKeyException,SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_DEF_ROW_SET_S");
			queryBean.setRowSetId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_ROW_SET(ROW_SET_ID, ROW_SET_NAME,RULE_CODE,EXT_ITEM_TYPE, DESCRIPTION,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:rowSetId, :rowSetName, :ruleCode, :extItemType, :description, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(queryBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateRowSetHeader(ItemRowSetHeaderBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ROW_SET SET");
			sql.append(" ROW_SET_NAME =NVL(:rowSetName,ROW_SET_NAME),");
			sql.append(" RULE_CODE =NVL(:ruleCode,RULE_CODE),");
			sql.append(" EXT_ITEM_TYPE =NVL(:extItemType,EXT_ITEM_TYPE),");
			sql.append(" DESCRIPTION =NVL(:description,DESCRIPTION),");

			sql.append(" LAST_UPDATE_DATE =NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY =NVL(:lastUpdatedBy,LAST_UPDATED_BY)");

			sql.append(" WHERE ROW_SET_ID=:rowSetId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public ItemRowSetHeaderBean getRowSetHeaderByByPrimaryKey(int primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemRowSetHeaderBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" ROW_SET_ID, ROW_SET_NAME,RULE_CODE,EXT_ITEM_TYPE, DESCRIPTION" + this.AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_DEF_ROW_SET ");
			sql.append(" WHERE ROW_SET_ID=" + primaryKey);
			result = (ItemRowSetHeaderBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new RowSetHeaderRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public List<Map<String, Object>> getRowSetLineList(ItemRowSetLineBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" HRS_DEF_ROW.*, ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			} else {
				sql.append(" HRS_DEF_ROW.*");
			}
			sql.append(" FROM HRS_DEF_ROW ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			// order by line number
			sql.append(" ORDER BY LINE_NUM ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveRowSetLineRecord(ItemRowSetLineBean reqBean) throws SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_DEF_ROW_S");
			reqBean.setRowId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_ROW(ROW_ID,ROW_SET_ID, LINE_NUM, ROW_NAME, ROW_NUM,CHANGE_SIGN,DISPLAY_FLAG,EXTERNAL_CODE,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,"
					+ "ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUTE10, "
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:rowId, :rowSetId, :lineNum, :rowName,:rowNum, :changeSign, :displayFlag, :externalCode, :attribute1, :attribute2, :attribute3, :attribute4, :attribute5, "
					+ " :attribute6, :attribute7, :attribute8, :attribute9, :attribute10, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);// ,
																// generatedKeyHolder,
																// new
																// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateRowSetLineRecord(ItemRowSetLineBean reqBean) throws SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ROW SET");
			sql.append(" ROW_SET_ID = NVL(:rowSetId,ROW_SET_ID),");
			sql.append(" LINE_NUM = NVL(:lineNum,LINE_NUM),");
			sql.append(" ROW_NAME = NVL(:rowName,ROW_NAME),");

			sql.append(" ROW_NUM = NVL(:rowNum,ROW_NUM),");
			sql.append(" CHANGE_SIGN = NVL(:changeSign,CHANGE_SIGN),");
			sql.append(" DISPLAY_FLAG = NVL(:displayFlag,DISPLAY_FLAG),");
			sql.append(" EXTERNAL_CODE =:externalCode,");
			sql.append(" ATTRIBUTE1 = :attribute1,");
			sql.append(" ATTRIBUTE2 = :attribute2,");
			sql.append(" ATTRIBUTE3 = :attribute3,");
			sql.append(" ATTRIBUTE4 = :attribute4,");
			sql.append(" ATTRIBUTE5 = :attribute5,");
			sql.append(" ATTRIBUTE6 = :attribute6,");
			sql.append(" ATTRIBUTE7 = :attribute7,");
			sql.append(" ATTRIBUTE8 = :attribute8,");
			sql.append(" ATTRIBUTE9 = :attribute9,");
			sql.append(" ATTRIBUTE10 =:attribute10,");
//			sql.append(" EXTERNAL_CODE = NVL(:externalCode,EXTERNAL_CODE),");
//			sql.append(" ATTRIBUTE1 = NVL(:attribute1,ATTRIBUTE1),");
//			sql.append(" ATTRIBUTE2 = NVL(:attribute2,ATTRIBUTE2),");
//			sql.append(" ATTRIBUTE3 = NVL(:attribute3,ATTRIBUTE3),");
//			sql.append(" ATTRIBUTE4 = NVL(:attribute4,ATTRIBUTE4),");
//			sql.append(" ATTRIBUTE5 = NVL(:attribute5,ATTRIBUTE5),");
//			sql.append(" ATTRIBUTE6 = NVL(:attribute6,ATTRIBUTE6),");
//			sql.append(" ATTRIBUTE7 = NVL(:attribute7,ATTRIBUTE7),");
//			sql.append(" ATTRIBUTE8 = NVL(:attribute8,ATTRIBUTE8),");
//			sql.append(" ATTRIBUTE9 = NVL(:attribute9,ATTRIBUTE9),");
//			sql.append(" ATTRIBUTE10 = NVL(:attribute10,ATTRIBUTE10),");
			// sql.append(" DESCRIPTION =
			// NVL(:dimSegDescription,DESCRIPTION),");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ROW_ID = :rowId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																						// generatedKeyHolder,
																						// new
																						// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}
	
	@Override
	public int deleteRowSetRecord(ItemRowSetHeaderBean reqBean) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ROW_SET");
			sql.append(" WHERE ROW_SET_ID = :rowSetId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public int deleteRefRowSetLines(ItemRowSetHeaderBean reqBean) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ROW");
			sql.append(" WHERE ROW_SET_ID = :rowSetId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}
	
	@Override
 	public ItemRowSetLineBean getRowSetLineByByPrimaryKey(long primaryKey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		ItemRowSetLineBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(
					" a.ROW_ID, a.ROW_SET_ID, a.LINE_NUM, a.ROW_NAME, a.ROW_NUM, a.CHANGE_SIGN, a.DISPLAY_FLAG, a.EXTERNAL_CODE " + 
			        ",a.ATTRIBUTE1, a.ATTRIBUTE2, a.ATTRIBUTE3, a.ATTRIBUTE4, a.ATTRIBUTE5, b.RULE_CODE "
							+ ", a.CREATION_DATE, a.CREATED_BY, a.LAST_UPDATE_DATE, a.LAST_UPDATED_BY ");
			sql.append(" FROM HRS_DEF_ROW a, HRS_DEF_ROW_SET b ");
			sql.append(" WHERE a.ROW_SET_ID = b.ROW_SET_ID" );
			sql.append(" AND a.ROW_ID=" + primaryKey);
			result = (ItemRowSetLineBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new RowSetLineRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}
	
	@Override
	public int deleteRefRowCalculations(ItemRowSetLineBean reqBean) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ROW_CALCULATION");
			sql.append(" WHERE ROW_ID = :rowId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}
	
	@Override
	public int deleteRowSetLineRecord(ItemRowSetLineBean reqBean) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ROW");
			sql.append(" WHERE ROW_ID = :rowId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}

	@Override
	public List<Map<String, Object>> getRowCalculationList(ItemRowCalculationBean queryBean) throws SQLException {
		String strCondition = buildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" HRS_DEF_ROW_CALCULATION.*, ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			} else {
				sql.append(" HRS_DEF_ROW_CALCULATION.*");
			}

			sql.append(" FROM HRS_DEF_ROW_CALCULATION ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}

			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int saveRowCalculationRecord(ItemRowCalculationBean reqBean) throws SQLException {
		int primaryKey = 0;
		try {
			// get primary key from sequence
			primaryKey = (int) this.getAutoGeneratedPrimaryKey("HRS_DEF_ROW_CALCULATION_S");
			reqBean.setRowCalId(primaryKey);
			String sql = "INSERT INTO HRS_DEF_ROW_CALCULATION(ROW_CAL_ID,ROW_ID, ROW_CAL_NUM,SIGN,CAL_ITEM_CODE,"
					+ "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)"
					+ " VALUES(:rowCalId, :rowId, :rowCalNum, :sign,:calItemCode, "
					+ ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			this.namedjdbcTemplate.update(sql, namedParameters);// ,
																// generatedKeyHolder,
																// new
																// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateRowCalculationRecord(ItemRowCalculationBean reqBean) throws SQLException {
		int updateNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_DEF_ROW_CALCULATION SET");
			sql.append(" ROW_ID = NVL(:rowId,ROW_ID),");
			sql.append(" ROW_CAL_NUM = NVL(:rowCalNum,ROW_CAL_NUM),");
			sql.append(" SIGN = NVL(:sign,SIGN),");

			sql.append(" CAL_ITEM_CODE = NVL(:calItemCode,CAL_ITEM_CODE),");

			// sql.append(" DESCRIPTION =
			// NVL(:dimSegDescription,DESCRIPTION),");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE ROW_CAL_ID = :rowCalId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																						// generatedKeyHolder,
																						// new
																						// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int deleteRowCalculationRecord(ItemRowCalculationBean reqBean) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_DEF_ROW_CALCULATION");
			sql.append(" WHERE ROW_CAL_ID = :rowCalId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}
	

	@Override
	public int countByRowSetHeaderBean(ItemRowSetHeaderBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ROW_SET ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByLookUpHeaderBean(ItemLookUpHeaderBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_LOOKUP_TYPE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByCodeExtHeaderBean(ItemCodeExtHeaderBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_EXTERNAL_ITEM_TYPE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByLookUpLineBean(ItemLookUpLineBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_LOOKUP_VALUE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByRowSetLineBean(ItemRowSetLineBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ROW ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByRowCalculationBean(ItemRowCalculationBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ROW_CALCULATION ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByCodeExtLineBean(ItemCodeExtLineBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_EXTERNAL_ITEM_VALUE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByItemGroupRuleHeaderBean(ItemGroupRuleHeaderBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_RULE_HEADER ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByItemGroupRuleLineBean(ItemGroupRuleLineBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_RULE_LINE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByItemHeaderBean(ItemHeaderBean reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ITEM_HEADER a ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int countByItemContentBean(ItemContentBean2 reqBean) throws SQLException {
		try {
			String strCondition = buildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_DEF_ITEM_CONTENT ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public String getLoopUpByRuleCode(String description) throws SQLException {

		StringBuffer sql = new StringBuffer();
		ItemGroupRuleHeaderBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" RULE_HEADER_ID, RULE_CODE, DESCRIPTION" + this.AUDIT_QUERY_STRING);
			sql.append(" FROM HRS_DEF_RULE_HEADER ");
			if (!StringUtils.isBlank(description)) {
				sql.append(" WHERE DESCRIPTION='" + description + "'");
			}
			result = (ItemGroupRuleHeaderBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new RuleHeaderRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		//System.out.println(result.getRuleCode());
		return result.getRuleCode();

	}

	@Override
	public List<Map<String, Object>> getRowIdByRowSetId(int id) throws SQLException {
		// TODO Auto-generated method stub
		String sql ="";
		List<Map<String, Object>> list = null;
		try {
			sql="select ROW_ID from HRS_DEF_ROW  where  ROW_SET_ID="+id;
			list = this.jdbcTemplate.queryForList(sql);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public ItemRowCalculationBean getRowCalculationRecordByPrimaryKey(int parseInt) throws SQLException {
		// TODO Auto-generated method stub
		StringBuffer sql = new StringBuffer();
		ItemRowCalculationBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" ROW_CAL_ID,ROW_ID, ROW_CAL_NUM,SIGN,CAL_ITEM_CODE");
			sql.append(" FROM HRS_DEF_ROW_CALCULATION ");
			sql.append(" WHERE ROW_CAL_ID=" + parseInt);
			result = (ItemRowCalculationBean) namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(),
					new RuleSetCalRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public List<Map<String, Object>> getRowCalIdByRowId(int rowSet) throws SQLException {
		// TODO Auto-generated method stub
		String sql ="";
		List<Map<String, Object>> list = null;
		try {
			sql="select CAL.ROW_CAL_ID from  HRS_DEF_ROW_CALCULATION cal where   CAL.ROW_ID="+rowSet;
			list = this.jdbcTemplate.queryForList(sql);
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}

	@Override
	public int getCountByCopyTableName(String rowSetName, int length) throws SQLException {
		// TODO Auto-generated method stub
		String sql ="";
		int number=0 ;
		try {
			sql="select count(*) COUNT from HRS_DEF_ROW_SET se where substr(SE.ROW_SET_NAME,0,"+length+")='"+rowSetName+"'";
			Map<String, Object> result = this.jdbcTemplate.queryForMap(sql);
			number = Integer.parseInt(result.get("COUNT").toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return number;
	}
	
}
*/