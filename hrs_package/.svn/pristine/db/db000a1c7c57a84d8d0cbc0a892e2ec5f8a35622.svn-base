package com.hausontech.hrs.daoImpl.dimensionManager;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import com.hausontech.hrs.api.constants.Constants;
import com.hausontech.hrs.api.dimensionManager.dao.IDimensionDao;
import com.hausontech.hrs.bean.AuditBean;
import com.hausontech.hrs.bean.dimensionManager.DimensionBean;
import com.hausontech.hrs.bean.dimensionManager.DimensionSonValueBean;
import com.hausontech.hrs.bean.dimensionManager.DimensionValueBean;
import com.hausontech.hrs.bean.reportSetting.ItemLookUpHeaderBean;
import com.hausontech.hrs.daoImpl.BaseDaoImpl;
import com.hausontech.hrs.daoImpl.dimensionManager.mapper.DimensionRowMapper;
import com.hausontech.hrs.daoImpl.dimensionManager.mapper.DimensionRowValueMapper;
import com.hausontech.hrs.utils.StringUtil;

public class DimensionDaoImpl extends BaseDaoImpl implements IDimensionDao {

	@Override
	public long insert(DimensionBean record) throws SQLException, DuplicateKeyException {
		long primaryKey = 0L;
		try {
			//get primary key from sequence
			primaryKey = this.getAutoGeneratedPrimaryKey("HRS_CORE_DIMENSION_S");
			record.setDimensionId(primaryKey);		
			String sql = "INSERT INTO HRS_CORE_DIMENSION(DIMENSION_ID, DIM_SEQ, DIMENSION_CODE,DIMENSION_NAME,DIM_SEGMENT,FIN_ACCOUNT_FLAG," +
		                                  "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)" +
			 		" VALUES(:dimensionId, :dimSeq, :dimensionCode, :dimensionName, :dimSegment, :finAccountFlag," +
		                                  ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";				
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			//GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
		    this.namedjdbcTemplate.update(sql, namedParameters);//, generatedKeyHolder, new String[]{"DIMENSION_ID"});		    
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public List<Map<String, Object>> selectByCondition(DimensionBean condition) throws SQLException {
		String strCondition = BuildCondition(condition);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			if (condition.getRowStartIndex() != 0 && condition.getRowCount() != 0) {
				sql.append(" HRS_CORE_DIMENSION.*, ROW_NUMBER() OVER (ORDER BY DIM_SEQ) AS row_number");
			} else {
				sql.append(" HRS_CORE_DIMENSION.*");
			}
			sql.append(" FROM HRS_CORE_DIMENSION ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			if (condition.getRowStartIndex() != 0 && condition.getRowCount() != 0) {
				sql = this.pageSql(sql, condition.getRowStartIndex(), condition.getRowCount());
			}
			
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}
	
	
	public int countByCondition(DimensionBean condition) throws SQLException {
		try {
			String strCondition = BuildCondition(condition);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_DIMENSION ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public DimensionBean selectByPrimaryKey(long key) throws SQLException {
		StringBuffer sql = new StringBuffer();
		DimensionBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" DIMENSION_ID, DIM_SEQ, DIMENSION_CODE,DIMENSION_NAME,DIM_SEGMENT,FIN_ACCOUNT_FLAG,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY ");
			sql.append(" FROM HRS_CORE_DIMENSION ");
			sql.append(" WHERE DIMENSION_ID=" + key);
			result = (DimensionBean)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), new DimensionRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}
	
	@Override
	public DimensionBean getDimentsionBySegmentCode(String segmentCode) throws SQLException {
		StringBuffer sql = new StringBuffer();
		DimensionBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" DIMENSION_ID, DIM_SEQ, DIMENSION_CODE,DIMENSION_NAME,DIM_SEGMENT,FIN_ACCOUNT_FLAG,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY ");
			sql.append(" FROM HRS_CORE_DIMENSION ");
			sql.append(" WHERE DIM_SEGMENT = '" + segmentCode + "'");
			result = (DimensionBean)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), new DimensionRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}
	
	@Override
	public DimensionBean getDimensionInfoBySegment(String segment) throws SQLException {
		StringBuffer sql = new StringBuffer();
		DimensionBean result = null;
		try {
			sql.append("SELECT ");
			sql.append(" DIMENSION_ID, DIM_SEQ, DIMENSION_CODE, DIMENSION_NAME, DIM_SEGMENT, FIN_ACCOUNT_FLAG,CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY ");
			sql.append(" FROM HRS_CORE_DIMENSION ");
			sql.append(" WHERE DIM_SEGMENT='" + segment + "'");
			result = (DimensionBean)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), new DimensionRowMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}

	@Override
	public int updateByPrimaryKey(DimensionBean record) throws SQLException {
		int updateNum = 0;
		try {
			StringBuffer  sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_DIMENSION SET");
			sql.append(" DIM_SEQ =NVL(:dimSeq,DIM_SEQ),");
			sql.append(" DIMENSION_CODE =NVL(:dimensionCode,DIMENSION_CODE),");
			sql.append(" DIMENSION_NAME =NVL(:dimensionName,DIMENSION_NAME),");
			sql.append(" DIM_SEGMENT =NVL(:dimSegment,DIM_SEGMENT),");
			sql.append(" FIN_ACCOUNT_FLAG =NVL(:finAccountFlag,FIN_ACCOUNT_FLAG),");
			sql.append(" LAST_UPDATE_DATE =NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY =NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE DIMENSION_ID=:dimensionId");			
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			//GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);//, generatedKeyHolder, new String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int deleteByPrimaryKey(long key) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	
	@Override
	public List<Map<String, Object>> getDimensionValueListByCondition(DimensionValueBean condition) throws SQLException {
		String strCondition = BuildCondition(condition);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
//			sql.append("SELECT ");
//			sql.append(" DIM_VALUE_ID, DIMENSION_ID, DIM_VALUE, DESCRIPTION, ACCOUNT_TYPE, SUMMARY_FLAG, DIM_LEVEL "  + this.AUDIT_QUERY_STRING);
//			sql.append(" FROM HRS_CORE_DIMENSION_VALUE ");
//			if (null != strCondition && strCondition.length() > 0) {
//				sql.append(" WHERE " + strCondition);
//			}
//			sql.append(" ORDER BY DIM_VALUE");
//			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
			
			sql.append("SELECT ");
			sql.append(" DIM_VAL.*, (DIM_VALUE || '-' || DESCRIPTION) AS DISP_VALUE ");
			
			if (condition.getRowStartIndex() != 0 && condition.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY DIM_VALUE) AS row_number");
			}
			sql.append(" FROM HRS_CORE_DIMENSION_VALUE DIM_VAL");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			if (condition.getRowStartIndex() != 0 && condition.getRowCount() != 0) {
				sql = this.pageSql(sql, condition.getRowStartIndex(), condition.getRowCount());
			}
			
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}
	
	
	@Override
	public int saveDimensionValueRecord(DimensionValueBean dimensionValueRecord) throws DuplicateKeyException, SQLException {
		int primaryKey = 0;
		try {
			//get primary key from sequence
			primaryKey = (int)this.getAutoGeneratedPrimaryKey("HRS_CORE_DIMENSION_VALUE_S");
			dimensionValueRecord.setDimensionValueId(primaryKey);
			if ("-1".equals(dimensionValueRecord.getAccountType())) {
				dimensionValueRecord.setAccountType(null);
			}
			String sql = "INSERT INTO HRS_CORE_DIMENSION_VALUE(DIM_VALUE_ID, DIMENSION_ID, DIM_VALUE, DESCRIPTION, ACCOUNT_TYPE, " +
			                              " SUMMARY_FLAG, DIM_LEVEL, START_DATE, END_DATE, SOURCE, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, " +
					                      " ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUTE10, " + 
		                                  " CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)" +
			 		" VALUES(:dimensionValueId, :dimensionId, :dimensionValue, :description, :accountType," +
		                                  ":summaryFlag, :dimensionLevel, :startDate, :endDate, :source, :attribute1, :attribute2, :attribute3, " +
			 		                      ":attribute4, :attribute5, :attribute6, :attribute7, :attribute8, :attribute9, :attribute10, " + 
		                                  ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";				
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(dimensionValueRecord);
			//GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
		    this.namedjdbcTemplate.update(sql, namedParameters);//, generatedKeyHolder, new String[]{"DIMENSION_ID"});		    
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}
	
	@Override
	public int updateDimensionValueRecord(DimensionValueBean record) throws DuplicateKeyException, SQLException {
		int updateNum = 0;
		try {
			if ("-1".equals(record.getAccountType())) {
				record.setAccountType(null);
			}
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_DIMENSION_VALUE SET");
			sql.append(" DIMENSION_ID = NVL(:dimensionId, DIMENSION_ID),");
			sql.append(" DIM_VALUE = NVL(:dimensionValue, DIM_VALUE),");
			sql.append(" DESCRIPTION = NVL(:description, DESCRIPTION),");
			sql.append(" ACCOUNT_TYPE = NVL(:accountType, ACCOUNT_TYPE),");
			sql.append(" SUMMARY_FLAG = NVL(:summaryFlag, SUMMARY_FLAG),");
			sql.append(" DIM_LEVEL = NVL(:dimensionLevel, DIM_LEVEL),");
			sql.append(" SOURCE = NVL(:source, SOURCE),");
//			sql.append(" ATTRIBUTE1 = NVL(:attribute1, ATTRIBUTE1),");
//			sql.append(" ATTRIBUTE2 = NVL(:attribute2, ATTRIBUTE2),");
//			sql.append(" ATTRIBUTE3 = NVL(:attribute3, ATTRIBUTE3),");
//			sql.append(" ATTRIBUTE4 = NVL(:attribute4, ATTRIBUTE4),");
//			sql.append(" ATTRIBUTE5 = NVL(:attribute5, ATTRIBUTE5),");
//			sql.append(" ATTRIBUTE6 = NVL(:attribute6, ATTRIBUTE6),");
//			sql.append(" ATTRIBUTE7 = NVL(:attribute7, ATTRIBUTE7),");
//			sql.append(" ATTRIBUTE8 = NVL(:attribute8, ATTRIBUTE8),");
//			sql.append(" ATTRIBUTE9 = NVL(:attribute9, ATTRIBUTE9),");
//			sql.append(" ATTRIBUTE10 = NVL(:attribute10, ATTRIBUTE10),");
			sql.append(" ATTRIBUTE1 = :attribute1, ");
			sql.append(" ATTRIBUTE2 = :attribute2,");
			sql.append(" ATTRIBUTE3 = :attribute3,");
			sql.append(" ATTRIBUTE4 = :attribute4,");
			sql.append(" ATTRIBUTE5 = :attribute5,");
			sql.append(" ATTRIBUTE6 = :attribute6,");
			sql.append(" ATTRIBUTE7 = :attribute7,");
			sql.append(" ATTRIBUTE8 = :attribute8,");
			sql.append(" ATTRIBUTE9 = :attribute9,");
			sql.append(" ATTRIBUTE10 = :attribute10,");
			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE DIM_VALUE_ID = :dimensionValueId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
		} catch (DuplicateKeyException de) {
			throw de;
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}
	
	@Override
	public int deleteDimensionValueRecord(DimensionValueBean record) throws SQLException {
		int delNum = 0;
		try {
			StringBuffer sql = new StringBuffer();
			sql.append("DELETE HRS_CORE_DIMENSION_VALUE");
			sql.append(" WHERE DIM_VALUE_ID=:dimensionValueId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(record);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			delNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																					// generatedKeyHolder,
																					// new
																					// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return delNum;
	}
	
	
	private String BuildCondition(AuditBean condition) {		
		StringBuffer sb = new StringBuffer();
		
		if (condition != null) {
			if (condition instanceof DimensionBean) {
				DimensionBean searchBean = (DimensionBean)condition;
				if(null != searchBean && searchBean.getDimensionId() != 0){
					sb.append("DIMENSION_ID="+ searchBean.getDimensionId() +" ");
					return sb.toString();
				}
						
				//前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if(null != searchBean && !searchBean.isEmpty()) {
					String dimensionCode = searchBean.getDimensionCode();
					if(null != dimensionCode && !dimensionCode.isEmpty()){
						sb.append(" DIMENSION_CODE = '"+ dimensionCode + "' ");	
					}
					
					String dimensionName = searchBean.getDimensionName();
					if(null!=dimensionName && !dimensionName.isEmpty()){
						if(sb.length()>0) {
							sb.append(" and ");
						}
						sb.append(" DIMENSION_NAME = '"+dimensionName+"' ");	
					}
				}
			} else if (condition instanceof DimensionValueBean) {
				DimensionValueBean searchBean = (DimensionValueBean)condition;
				if(null != searchBean && searchBean.getDimensionValueId() != 0){
					sb.append(" DIM_VALUE_ID="+ searchBean.getDimensionValueId() +" ");
					return sb.toString();
				}
						
				//前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if(null != searchBean && !searchBean.isEmpty()) {
					long dimensionId = searchBean.getDimensionId();
					if (dimensionId != 0) {
						sb.append(" DIMENSION_ID="+ searchBean.getDimensionId() +" ");
					}
					
					String dimValueCode = searchBean.getDimensionValue();
					if(null != dimValueCode && !dimValueCode.isEmpty()) {
						if(sb.length() > 0) {
							sb.append(" and ");
						}
						
						if (dimValueCode.contains(Constants.PERCENT_CHARACTER)) {
							sb.append(" DIM_VALUE like '"+ dimValueCode + "' ");	
						} else {
							sb.append(" DIM_VALUE = '"+ dimValueCode + "' ");	
						}
					}
			        String summaryFlag=searchBean.getSummaryFlag();
					if (null!=summaryFlag&&!summaryFlag.isEmpty()){
						if(sb.length()>0) {
							sb.append(" and ");
						}
						sb.append(" SUMMARY_FLAG ='"+summaryFlag+"' ");
					}
					String dimValueNamme = searchBean.getDescription();
					if(null!=dimValueNamme && !dimValueNamme.isEmpty()){
						if(sb.length()>0) {
							sb.append(" and ");
						}
						sb.append(" DESCRIPTION = '"+dimValueNamme+"' ");	
					}
				}
				//add security condition
				if (searchBean != null && searchBean.isSecurityEnabled() && 
						!StringUtil.isEmptyTrim(searchBean.getUserName())) {
					//filter dim value from user authority table
					if(sb.length()>0) {
						sb.append(" AND ");
					}
					sb.append(" EXISTS (SELECT 1 FROM HRS_CORE_USER_AUTHORITY SEC WHERE 1 = 1 ");
					sb.append(" AND SEC.USER_NAME = '" + searchBean.getUserName() + "' ");
					sb.append(" AND DIM_VAL.DIM_VALUE BETWEEN DECODE(SEC.COMPANY_CODE_FROM,'ALL','0',SEC.COMPANY_CODE_FROM) AND NVL(SEC.COMPANY_CODE_TO, 'ZZZ'))");
			    }
			} else if (condition instanceof DimensionSonValueBean) {
				DimensionSonValueBean searchBean = (DimensionSonValueBean)condition;
				if(null != searchBean && searchBean.getHierarchyId() != 0){
					sb.append("HIERARCHY_ID="+ searchBean.getHierarchyId() +" ");
					return sb.toString();
				}
						
				//前台页面 摸人加载数据也是 默认触发查询按钮产生的，所以，查询条件肯定是有的了。
				if(null != searchBean && !searchBean.isEmpty()) {
					long dimensionId = searchBean.getDimensionId();
					if (dimensionId != 0) {
						sb.append("DIMENSION_ID="+ searchBean.getDimensionId() +" ");
					}
					
					String dimValueCode = searchBean.getDimValue();
					if (dimValueCode != null && !dimValueCode.isEmpty()) {
						if (0 < sb.length()) {
							sb.append(" and ");
						}
						sb.append(" DIM_VALUE = '"+ dimValueCode + "' ");	
					}
					
					String childDimLowValue = searchBean.getChildDimValueLow();
					if(null != childDimLowValue && !childDimLowValue.isEmpty()) {
						if(sb.length() > 0) {
							sb.append(" and ");
						}
						sb.append(" CHILD_DIM_VALUE_LOW = '"+ childDimLowValue + "' ");	
					}
					
					String childDimHighValue = searchBean.getChildDimValueHigh();
					if(null!=childDimHighValue && !childDimHighValue.isEmpty()){
						if(sb.length()>0) {
							sb.append(" and ");
						}
						sb.append(" CHILD_DIM_VALUE_HIGH = '"+childDimHighValue+"' ");	
					}
				}
			}
		}
		return sb.toString();
	}

	@Override
	public DimensionValueBean selectDimensionValueBeanByPrimaryKey(long headkey, long parentkey) throws SQLException {
		StringBuffer sql = new StringBuffer();
		DimensionValueBean result = null;
		
//		System.out.println("头行"+headkey);
//		System.out.println("父级"+parentkey);
		try {
			sql.append("SELECT ");
			sql.append(" HRS_CORE_DIMENSION_VALUE.*");
			sql.append(" FROM HRS_CORE_DIMENSION_VALUE ");
			sql.append(" WHERE DIMENSION_ID=" + parentkey);
			sql.append(" AND DIM_VALUE_ID=" + headkey);
			result = (DimensionValueBean)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), new DimensionRowValueMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		
		//System.out.println(result.getDescription()+"dao316");
		return result;
	}

	@Override
	public List<Map<String, Object>> getDimensionSonValueListByCondition(DimensionSonValueBean queryBean)
			throws SQLException {
		String strCondition = BuildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT ");
			   if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
					sql.append(" HRS_CORE_DIM_VALUE_HIERARCHY.*, ROW_NUMBER() OVER (ORDER BY CHILD_DIM_VALUE_LOW) AS row_number");
				} else {
					sql.append(" HRS_CORE_DIM_VALUE_HIERARCHY.*");
				}
				
			sql.append(" FROM HRS_CORE_DIM_VALUE_HIERARCHY ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}

			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}
	
	@Override
	public List<DimensionValueBean> getDimensionValueByCondition(DimensionValueBean queryBean) throws SQLException {
		String strCondition = BuildCondition(queryBean);
		StringBuffer sql = new StringBuffer();
		List<DimensionValueBean> result = null;
		try {

			sql.append("SELECT ");
			sql.append(" DIM_VALUE_ID, DIMENSION_ID, DIM_VALUE, DESCRIPTION, ACCOUNT_TYPE, SUMMARY_FLAG, DIM_LEVEL,");
			sql.append(" START_DATE, END_DATE, SOURCE, CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY ");
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY DIM_VALUE) AS row_number");
			}
			sql.append(" FROM HRS_CORE_DIMENSION_VALUE DIM_VAL ");			
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" WHERE " + strCondition);
			}
			if (queryBean.getRowStartIndex() != 0 && queryBean.getRowCount() != 0) {
				sql = this.pageSql(sql, queryBean.getRowStartIndex(), queryBean.getRowCount());
			}
			result = namedjdbcTemplate.getJdbcOperations().query(sql.toString(), new DimensionRowValueMapper());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return result;
	}
	
	

	@Override
	public int countByDimensionSonValueBean(DimensionSonValueBean reqBean) throws SQLException {
		try {
			String strCondition = BuildCondition(reqBean);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_DIM_VALUE_HIERARCHY ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public int saveDimensionSonValueRecord(DimensionSonValueBean reqBean) throws SQLException {
		int primaryKey = 0;
		try {
			//get primary key from sequence
			primaryKey = (int)this.getAutoGeneratedPrimaryKey("HRS_CORE_DIM_VALUE_HIERARCHY_S");
			reqBean.setHierarchyId(primaryKey);
			
			String sql = "INSERT INTO HRS_CORE_DIM_VALUE_HIERARCHY(HIERARCHY_ID, DIM_VALUE, DIMENSION_ID, CHILD_DIM_VALUE_LOW, CHILD_DIM_VALUE_HIGH,SOURCE," +
		                                  "CREATION_DATE,CREATED_BY,LAST_UPDATE_DATE,LAST_UPDATED_BY)" +
			 		" VALUES(:hierarchyId, :dimValue, :dimensionId, :childDimValueLow, :childDimValueHigh,:source," +
		                              
		                                  ":creationDate, :createdBy, :lastUpdateDate, :lastUpdatedBy)";				
			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			//GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
		    this.namedjdbcTemplate.update(sql, namedParameters);//, generatedKeyHolder, new String[]{"DIMENSION_ID"});		    
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return primaryKey;
	}

	@Override
	public int updateDimensionSonValueRecord(DimensionSonValueBean reqBean) throws SQLException {
		int updateNum = 0;
		try {
			
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE HRS_CORE_DIM_VALUE_HIERARCHY SET");
			sql.append(" DIM_VALUE = NVL(:dimValue, DIM_VALUE),");
			sql.append(" DIMENSION_ID = NVL(:dimensionId, DIMENSION_ID),");
			sql.append(" CHILD_DIM_VALUE_LOW = NVL(:childDimValueLow, CHILD_DIM_VALUE_LOW),");
			sql.append(" CHILD_DIM_VALUE_HIGH = NVL(:childDimValueHigh, CHILD_DIM_VALUE_HIGH),");

			sql.append(" LAST_UPDATE_DATE = NVL(:lastUpdateDate,LAST_UPDATE_DATE),");
			sql.append(" LAST_UPDATED_BY = NVL(:lastUpdatedBy,LAST_UPDATED_BY)");
			sql.append(" WHERE HIERARCHY_ID = :hierarchyId");

			SqlParameterSource namedParameters = new BeanPropertySqlParameterSource(reqBean);
			// GeneratedKeyHolder generatedKeyHolder = new GeneratedKeyHolder();
			updateNum = this.namedjdbcTemplate.update(sql.toString(), namedParameters);// ,
																						// generatedKeyHolder,
																						// new
																						// String[]{"DIMENSION_ID"});
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return updateNum;
	}

	@Override
	public int countByCondition(DimensionValueBean condition) throws SQLException {
		try {
			String strCondition = BuildCondition(condition);
			StringBuffer sql = new StringBuffer();
			sql.append(" select count(1) from HRS_CORE_DIMENSION_VALUE ");
			if (null != strCondition && strCondition.length() > 0) {
				sql.append(" where " + strCondition);
			}
			return (int)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}
	
	@Override
	public List<Map<String, Object>> getLookUpValueListAsDimension(ItemLookUpHeaderBean lookUpHeaderBean) throws SQLException {
		StringBuffer sql = new StringBuffer();
		List<Map<String, Object>> list = null;
		try {
			sql.append("SELECT lookupVal.LOOKUP_VALUE AS DIM_VALUE, lookupVal.DESCRIPTION AS DESCRIPTION, (lookupVal.LOOKUP_VALUE || '-' || lookupVal.DESCRIPTION) AS DISP_VALUE ");
			if (lookUpHeaderBean.getRowStartIndex() != 0 && lookUpHeaderBean.getRowCount() != 0) {
				sql.append(" , ROW_NUMBER() OVER (ORDER BY 1) AS row_number");
			}
			sql.append(" FROM HRS_CORE_LOOKUP_TYPE lookupType, HRS_CORE_LOOKUP_VALUE lookupVal ");
			sql.append(" WHERE lookupType.Lookup_Type_Id = lookupVal.Lookup_Type_Id ");
			if (lookUpHeaderBean != null) {
				if (!StringUtil.isEmptyTrim(lookUpHeaderBean.getLookUpType())){
					sql.append(" AND lookupType.Lookup_Type='" + lookUpHeaderBean.getLookUpType() + "' ");
				} 
				if (!StringUtil.isEmptyTrim(lookUpHeaderBean.getLookupValSearch())) {
					sql.append(" AND lookupVal.LOOKUP_VALUE like '" + lookUpHeaderBean.getLookupValSearch() + "' ");
				}	
			}		
			if (lookUpHeaderBean.getRowStartIndex() != 0 && lookUpHeaderBean.getRowCount() != 0) {
				sql = this.pageSql(sql, lookUpHeaderBean.getRowStartIndex(), lookUpHeaderBean.getRowCount());
			}
			list = namedjdbcTemplate.getJdbcOperations().queryForList(sql.toString());
		} catch (Exception e) {
			throw new SQLException(e);
		}
		return list;
	}
	
	@Override
	public int countLookUpValueListByCondition(ItemLookUpHeaderBean lookUpHeaderBean) throws SQLException {
		try {
			StringBuffer sql = new StringBuffer();
			sql.append(" SELECT count(1) ");
			sql.append(" FROM HRS_CORE_LOOKUP_TYPE lookupType, HRS_CORE_LOOKUP_VALUE lookupVal ");
			sql.append(" WHERE lookupType.Lookup_Type_Id = lookupVal.Lookup_Type_Id ");
			if (lookUpHeaderBean != null) {
				if (!StringUtil.isEmptyTrim(lookUpHeaderBean.getLookUpType())){
					sql.append(" AND lookupType.Lookup_Type='" + lookUpHeaderBean.getLookUpType() + "' ");
				} else if (!StringUtil.isEmptyTrim(lookUpHeaderBean.getLookupValSearch())) {
					sql.append(" AND lookupVal.LOOKUP_VALUE like '" + lookUpHeaderBean.getLookupValSearch() + "' ");
				}	
			}
			return (int)namedjdbcTemplate.getJdbcOperations().queryForObject(sql.toString(), int.class);
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}
	
}
